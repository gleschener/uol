{'aws-connected-vehicle-solution': {'desc': 'The AWS Connected Vehicle Solution is a reference implementation that provides a foundation for automotive product transformations for connected vehicle services, autonomous driving, electric powertrains, and shared mobility.', 'LICENSE.txt': 'Amazon Software License\nThis Amazon Software License (“License”) governs your use, reproduction, and distribution of the accompanying software as specified below.\n1. Definitions\n“Licensor” means any person or entity that distributes its Work.\n\n“Software” means the original work of authorship made available under this License.\n\n“Work” means the Software and any additions to or derivative works of the Software that are made available under this License.\n\nThe terms “reproduce,” “reproduction,” “derivative works,” and “distribution” have the meaning as provided under U.S. copyright law; provided, however, that for the purposes of this License, derivative works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work.\n\nWorks, including the Software, are “made available” under this License by including in or with the Work either (a) a copyright notice referencing the applicability of this License to the Work, or (b) a copy of this License.\n2. License Grants\n2.1 Copyright Grant. Subject to the terms and conditions of this License, each Licensor grants to you a perpetual, worldwide, non-exclusive, royalty-free, copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, sublicense and distribute its Work and any resulting derivative works in any form.\n2.2 Patent Grant. Subject to the terms and conditions of this License, each Licensor grants to you a perpetual, worldwide, non-exclusive, royalty-free patent license to make, have made, use, sell, offer for sale, import, and otherwise transfer its Work, in whole or in part. The foregoing license applies only to the patent claims licensable by Licensor that would be infringed by Licensor’s Work (or portion thereof) individually and excluding any combinations with any other materials or technology.\n3. Limitations\n3.1 Redistribution. You may reproduce or distribute the Work only if (a) you do so under this License, (b) you include a complete copy of this License with your distribution, and (c) you retain without modification any copyright, patent, trademark, or attribution notices that are present in the Work.\n3.2 Derivative Works. You may specify that additional or different terms apply to the use, reproduction, and distribution of your derivative works of the Work (“Your Terms”) only if (a) Your Terms provide that the use limitation in Section 3.3 applies to your derivative works, and (b) you identify the specific derivative works that are subject to Your Terms. Notwithstanding Your Terms, this License (including the redistribution requirements in Section 3.1) will continue to apply to the Work itself.\n3.3 Use Limitation. The Work and any derivative works thereof only may be used or intended for use with the web services, computing platforms or applications provided by Amazon.com, Inc. or its affiliates, including Amazon Web Services, Inc.\n3.4 Patent Claims. If you bring or threaten to bring a patent claim against any Licensor (including any claim, cross-claim or counterclaim in a lawsuit) to enforce any patents that you allege are infringed by any Work, then your rights under this License from such Licensor (including the grants in Sections 2.1 and 2.2) will terminate immediately.\n3.5 Trademarks. This License does not grant any rights to use any Licensor’s or its affiliates’ names, logos, or trademarks, except as necessary to reproduce the notices described in this License.\n3.6 Termination. If you violate any term of this License, then your rights under this License (including the grants in Sections 2.1 and 2.2) will terminate immediately.\n4. Disclaimer of Warranty.\nTHE WORK IS PROVIDED “AS IS” WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WARRANTIES OR CONDITIONS OF M ERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE OR NON-INFRINGEMENT. YOU BEAR THE RISK OF UNDERTAKING ANY ACTIVITIES UNDER THIS LICENSE. SOME STATES’ CONSUMER LAWS DO NOT ALLOW EXCLUSION OF AN IMPLIED WARRANTY, SO THIS DISCLAIMER MAY NOT APPLY TO YOU.\n5. Limitation of Liability.\nEXCEPT AS PROHIBITED BY APPLICABLE LAW, IN NO EVENT AND UNDER NO LEGAL THEORY, WHETHER IN TORT (INCLUDING NEGLIGENCE), CONTRACT, OR OTHERWISE SHALL ANY LICENSOR BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF OR RELATED TO THIS LICENSE, THE USE OR INABILITY TO USE THE WORK (INCLUDING BUT NOT LIMITED TO LOSS OF GOODWILL, BUSINESS INTERRUPTION, LOST PROFITS OR DATA, COMPUTER FAILURE OR MALFUNCTION, OR ANY OTHER COMM ERCIAL DAMAGES OR LOSSES), EVEN IF THE LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\nEffective Date – April 18, 2008 © 2008 Amazon.com, Inc. or its affiliates. All rights reserved.\n\nNote: Other license terms may apply to certain, identified software files contained within or\ndistributed with the accompanying software if such terms are included in the directory containing\nthe accompanying software. Such other license terms will then apply in lieu of the terms of the\nsoftware license above.\n', 'NOTICE.txt': 'AWS Connected Vehicle Solution\n\nCopyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.\nLicensed under the Amazon Software License (the "License"). You may not use this file except\nin compliance with the License. A copy of the License is located at http://aws.amazon.com/asl/\nor in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or implied. See the License for the\nspecific language governing permissions and limitations under the License.\n\n**********************\nTHIRD PARTY COMPONENTS\n**********************\nThis software includes third party software subject to the following copyrights:\n\nAWS SDK under the Apache License Version 2.0\nUnderscore.js under the Massachusetts Institute of Technology (MIT) license\nMoment.js under the Massachusetts Institute of Technology (MIT) license\nshortid under the Massachusetts Institute of Technology (MIT) license\nrandomstring under the Massachusetts Institute of Technology (MIT) license\n\nThe licenses for these third party components are included in LICENSE.txt\n', 'index.js': '/*********************************************************************************************************************\n *  Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *\n *                                                                                                                    *\n *  Licensed under the Amazon Software License (the "License"). You may not use this file except in compliance        *\n *  with the License. A copy of the License is located at                                                             *\n *                                                                                                                    *\n *      http://aws.amazon.com/asl/                                                                                    *\n *                                                                                                                    *\n *  or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES *\n *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions    *\n *  and limitations under the License.                                                                                *\n *********************************************************************************************************************/\n\n/**\n * @author Solution Builders\n */\n\n\'use strict\';\n\n/**\n * Lib\n */\nlet AWS = require(\'aws-sdk\');\n\n// add service library modules here\nlet Vehicle = require(\'./vehicle.js\');\nlet Dtc = require(\'./dtc.js\');\nlet Trip = require(\'./trip.js\');\nlet Anomaly = require(\'./anomaly.js\');\nlet HealthReport = require(\'./healthreport.js\');\n\n// service constants\nconst servicename = \'vehicle-service\'; // name of the service for logging\n\n/**\n * Verifies user\'s authorization to execute requested action. If the request is\n * authorized, it is processed, otherwise a 401 unathorized result is returned\n * @param {JSON} event - Request event.\n * @param {respond~requestCallback} cb - The callback that handles the response.\n */\nmodule.exports.respond = function(event, cb) {\n\n    processRequest(event, cb);\n\n};\n\n/**\n * Routes the request to the appropriate logic based on the request resource and method.\n * @param {JSON} event - Request event.\n * @param {JSON} ticket - authorization ticket.\n * @param {processRequest~requestCallback} cb - The callback that handles the response.\n */\nfunction processRequest(event, cb) {\n\n    // set the claims ticket\n    let _ticket = event.requestContext.authorizer.claims;\n\n    // catch error if proxied API path sent to service is not processed by available logic\n    let INVALID_PATH_ERR = {\n        Error: [\'Invalid path request \', event.resource, \', \', event.httpMethod].join(\'\')\n    };\n\n    // instantiate service modules\n    let _vehicle = new Vehicle();\n    let _dtc = new Dtc();\n    let _trip = new Trip();\n    let _anomaly = new Anomaly();\n    let _healthreport = new HealthReport();\n    let _response = \'\';\n\n    let _body = {};\n    let _operation = \'\';\n    if (event.body) {\n        _body = JSON.parse(event.body);\n    }\n\n    // set logic for proxied API path\n    if (event.resource === \'/vehicles\' && event.httpMethod === \'GET\') {\n        _operation = \'retrieving vehicles for user\';\n        _vehicle.listVehicles(_ticket, function(err, data) {\n            processResponse(err, data, _operation, event.requestContext.requestId, _ticket[\'cognito:username\'], cb);\n        });\n    } else if (event.resource === \'/vehicles\' && event.httpMethod === \'POST\') {\n        _operation = \'registering vehicle for owner\'; // set a description of the operation for logging\n        _vehicle.createVehicle(_ticket, _body, function(err, data) {\n            processResponse(err, data, _operation, event.requestContext.requestId, _ticket[\'cognito:username\'], cb);\n        });\n    } else if (event.resource === \'/vehicles/{vin}\' && event.httpMethod === \'GET\') {\n        _operation = \'retrieving vehicle for user\';\n        _vehicle.getVehicle(_ticket, event.pathParameters.vin, function(err, data) {\n            processResponse(err, data, _operation, event.requestContext.requestId, _ticket[\'cognito:username\'], cb);\n        });\n    } else if (event.resource === \'/vehicles/{vin}/dtc\' && event.httpMethod === \'GET\') {\n        _operation = \'retrieving dtc records of vehicle for user\';\n        _dtc.listDtcByVehicle(_ticket, event.pathParameters.vin, function(err, data) {\n            processResponse(err, data, _operation, event.requestContext.requestId, _ticket[\'cognito:username\'], cb);\n        });\n    } else if (event.resource === \'/vehicles/{vin}/dtc/{dtc_id}\' && event.httpMethod === \'GET\') {\n        _operation = \'retrieving dtc record of vehicle for user\';\n        _dtc.getVehicleDtc(_ticket, event.pathParameters.vin, event.pathParameters.dtc_id, function(err, data) {\n            processResponse(err, data, _operation, event.requestContext.requestId, _ticket[\'cognito:username\'], cb);\n        });\n    } else if (event.resource === \'/vehicles/{vin}/dtc/{dtc_id}/acknowledge\' && event.httpMethod === \'PUT\') {\n        _operation = \'acknowledge dtc record of vehicle for user\';\n        _dtc.acknowledgeVehicleDtc(_ticket, event.pathParameters.vin, event.pathParameters.dtc_id, function(err, data) {\n            processResponse(err, data, _operation, event.requestContext.requestId, _ticket[\'cognito:username\'], cb);\n        });\n    } else if (event.resource === \'/vehicles/{vin}/anomalies\' && event.httpMethod === \'GET\') {\n        _operation = \'retrieving anomaly records of vehicle for user\';\n        _anomaly.listAnomaliesByVehicle(_ticket, event.pathParameters.vin, function(err, data) {\n            processResponse(err, data, _operation, event.requestContext.requestId, _ticket[\'cognito:username\'], cb);\n        });\n    } else if (event.resource === \'/vehicles/{vin}/anomalies/{anomaly_id}\' && event.httpMethod === \'GET\') {\n        _operation = \'retrieving anomaly record of vehicle for user\';\n        _anomaly.getVehicleAnomaly(_ticket, event.pathParameters.vin, event.pathParameters.anomaly_id, function(err, data) {\n            processResponse(err, data, _operation, event.requestContext.requestId, _ticket[\'cognito:username\'], cb);\n        });\n    } else if (event.resource === \'/vehicles/{vin}/anomalies/{anomaly_id}/acknowledge\' && event.httpMethod === \'PUT\') {\n        _operation = \'acknowledge anomaly record of vehicle for user\';\n        _anomaly.acknowledgeVehicleAnomaly(_ticket, event.pathParameters.vin, event.pathParameters.anomaly_id, function(err,\n            data) {\n            processResponse(err, data, _operation, event.requestContext.requestId, _ticket[\'cognito:username\'], cb);\n        });\n    } else if (event.resource === \'/vehicles/{vin}/trips\' && event.httpMethod === \'GET\') {\n        _operation = \'retrieving trip records of vehicle for user\';\n        _trip.listTripsByVehicle(_ticket, event.pathParameters.vin, function(err, data) {\n            processResponse(err, data, _operation, event.requestContext.requestId, _ticket[\'cognito:username\'], cb);\n        });\n    } else if (event.resource === \'/vehicles/{vin}/trips/{trip_id}\' && event.httpMethod === \'GET\') {\n        _operation = \'retrieving trip record of vehicle for user\';\n        _trip.getVehicleTrip(_ticket, event.pathParameters.vin, event.pathParameters.trip_id, function(err, data) {\n            processResponse(err, data, _operation, event.requestContext.requestId, _ticket[\'cognito:username\'], cb);\n        });\n    } else if (event.resource === \'/vehicles/{vin}/healthreports\' && event.httpMethod === \'GET\') {\n        _operation = \'retrieving health report records of vehicle for user\';\n        _healthreport.listHealthReportsByVehicle(_ticket, event.pathParameters.vin, function(err, data) {\n            processResponse(err, data, _operation, event.requestContext.requestId, _ticket[\'cognito:username\'], cb);\n        });\n    } else if (event.resource === \'/vehicles/{vin}/healthreports/{report_id}\' && event.httpMethod === \'GET\') {\n        _operation = \'retrieving health report record of vehicle for user\';\n        _healthreport.getVehicleHealthReport(_ticket, event.pathParameters.vin, event.pathParameters.report_id, function(err,\n            data) {\n            processResponse(err, data, _operation, event.requestContext.requestId, _ticket[\'cognito:username\'], cb);\n        });\n    } else {\n        _response = buildOutput(500, INVALID_PATH_ERR);\n        return cb(_response, null);\n    }\n\n};\n\n/**\n * Process operation response and log the access/result.\n * @param {JSON} err - Error returned from operation.\n * @param {JSON} data - Data returned from operation.\n * @param {JSON} operation - Description of operation executed.\n * @param {string} requestId - Id of the request.\n * @param {string} userid - Id of user requesting operation.\n * @param {processResponse~callback} cb - The callback that handles the response.\n */\nfunction processResponse(err, data, operation, requestId, userid, cb) {\n    let _response = {};\n\n    if (err) {\n        console.log(err);\n        _response = buildOutput(500, err);\n        return cb(_response, null);\n        // _accessLog.logEvent(requestId, servicename, userid, operation, \'failed/error\', function(err, resp) {\n        //     return cb(_response, null);\n        // });\n    } else {\n        _response = buildOutput(200, data);\n        return cb(null, _response);\n        // _accessLog.logEvent(requestId, servicename, userid, operation, \'success\', function(err, resp) {\n        //     return cb(null, _response);\n        // });\n    }\n};\n\n/**\n * Constructs the appropriate HTTP response.\n * @param {integer} statusCode - HTTP status code for the response.\n * @param {JSON} data - Result body to return in the response.\n */\nfunction buildOutput(statusCode, data) {\n\n    let _response = {\n        statusCode: statusCode,\n        headers: {\n            \'Access-Control-Allow-Origin\': \'*\'\n        },\n        body: JSON.stringify(data)\n    };\n\n    return _response;\n};\n', 'dynamodb-helper.js': '/*********************************************************************************************************************\n *  Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *\n *                                                                                                                    *\n *  Licensed under the Amazon Software License (the "License"). You may not use this file except in compliance        *\n *  with the License. A copy of the License is located at                                                             *\n *                                                                                                                    *\n *      http://aws.amazon.com/asl/                                                                                    *\n *                                                                                                                    *\n *  or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES *\n *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions    *\n *  and limitations under the License.                                                                                *\n *********************************************************************************************************************/\n\n/**\n * @author Solution Builders\n */\n\n\'use strict\';\n\nlet moment = require(\'moment\');\nlet AWS = require(\'aws-sdk\');\nconst fs = require(\'fs\');\nlet csv = require(\'fast-csv\');\nlet codes_info = [];\n\nlet creds = new AWS.EnvironmentCredentials(\'AWS\'); // Lambda provided credentials\nconst dynamoConfig = {\n    credentials: creds,\n    region: process.env.AWS_REGION\n};\n\n/**\n * Helper function to interact with dynamodb for data lake cfn custom resource.\n *\n * @class dynamoDBHelper\n */\nlet dynamoDBHelper = (function() {\n\n    /**\n     * @class dynamoDBHelper\n     * @constructor\n     */\n    let dynamoDBHelper = function() {};\n\n    /**\n     * Loads POIs into marketing table.\n     * @param {string} ddbTable - POI table.\n     * @param {loadDtcCodes~requestCallback} cb - The callback that handles the response.\n     */\n    dynamoDBHelper.prototype.loadPois = function(ddbTable, cb) {\n\n        let parser = csv();\n        let fileStream = fs.createReadStream(\'./marketing-pois.csv\');\n        fileStream\n            .on(\'readable\', function() {\n                var data;\n                while ((data = fileStream.read()) !== null) {\n                    parser.write(data);\n                }\n            })\n            .on(\'end\', function() {\n                parser.end();\n            });\n\n        parser\n            .on(\'readable\', function() {\n                var data;\n                while ((data = parser.read()) !== null) {\n                    codes_info.push({\n                        poi_id: data[0],\n                        address: data[1],\n                        city: data[2],\n                        latitude: data[3],\n                        longitude: data[4],\n                        message: data[5],\n                        poi: data[6],\n                        radius: data[7],\n                        state: data[8]\n                    });\n                }\n            })\n            .on(\'end\', function() {\n                console.log(\'Attempting to load POIs to marketing table.\');\n                loadCodes(codes_info, 0, ddbTable, function(err, data) {\n                    if (err) {\n                        console.log(\'Error loading POI marketing table\', err);\n                    } else {\n                        console.log(\'Successfully loaded POI marketing table.\');\n                    }\n                    cb(null, \'success\');\n                });\n            });\n\n    };\n\n    /**\n     * Loads DTC codes into reference table.\n     * @param {string} ddbTable - DTC reference table.\n     * @param {loadDtcCodes~requestCallback} cb - The callback that handles the response.\n     */\n    dynamoDBHelper.prototype.loadDtcCodes = function(ddbTable, cb) {\n\n        let parser = csv();\n        let fileStream = fs.createReadStream(\'./obd-trouble-codes.csv\');\n        fileStream\n            .on(\'readable\', function() {\n                var data;\n                while ((data = fileStream.read()) !== null) {\n                    parser.write(data);\n                }\n            })\n            .on(\'end\', function() {\n                parser.end();\n            });\n\n        parser\n            .on(\'readable\', function() {\n                var data;\n                while ((data = parser.read()) !== null) {\n                    codes_info.push({\n                        dtc: data[0],\n                        description: data[1],\n                        steps: []\n                    });\n                }\n            })\n            .on(\'end\', function() {\n                console.log(\'Attempting to load DTC codes to reference table.\');\n                loadCodes(codes_info, 0, ddbTable, function(err, data) {\n                    if (err) {\n                        console.log(\'Error loading DTC reference table\', err);\n                    } else {\n                        console.log(\'Successfully loaded DTC reference table.\');\n                    }\n                    cb(null, \'success\');\n                });\n            });\n\n    };\n\n    var loadCodes = function(items, index, ddbTable, cb) {\n        if (index < items.length) {\n            let params = {\n                TableName: ddbTable,\n                Item: items[index]\n            };\n\n            const docClient = new AWS.DynamoDB.DocumentClient(dynamoConfig);\n            docClient.put(params, function(err, data) {\n                if (err) {\n                    console.log(err);\n                } else {\n                    console.log([\'Added DTC\', params.Item.dtc].join(\': \'));\n                }\n\n                index++;\n                setTimeout(loadCodes, 500, items, index, ddbTable, cb);\n            });\n        } else {\n            return cb(null, \'All codes processed..\');\n        }\n\n    };\n\n    return dynamoDBHelper;\n\n})();\n\nmodule.exports = dynamoDBHelper;\n', 'iot-helper.js': '/*********************************************************************************************************************\n *  Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *\n *                                                                                                                    *\n *  Licensed under the Amazon Software License (the "License"). You may not use this file except in compliance        *\n *  with the License. A copy of the License is located at                                                             *\n *                                                                                                                    *\n *      http://aws.amazon.com/asl/                                                                                    *\n *                                                                                                                    *\n *  or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES *\n *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions    *\n *  and limitations under the License.                                                                                *\n *********************************************************************************************************************/\n\n/**\n * @author Solution Builders\n */\n\n\'use strict\';\n\nlet moment = require(\'moment\');\nlet AWS = require(\'aws-sdk\');\n\n/**\n * Helper function to interact with AWS IoT for cfn custom resource.\n *\n * @class iotHelper\n */\nlet iotHelper = (function() {\n\n    /**\n     * @class iotHelper\n     * @constructor\n     */\n    let iotHelper = function() {};\n\n    /**\n     * Creates an IoT topic rule. Stop gap for missing dynamoDBv2 in CFN.\n     * @param {string} settings - Settings for creation of the IoT topic rule.\n     * @param {createTopicRule~requestCallback} cb - The callback that handles the response.\n     */\n    iotHelper.prototype.createTopicRule = function(settings, cb) {\n\n        var params = {\n            ruleName: settings.name,\n            topicRulePayload: {\n                actions: settings.actions,\n                sql: settings.sql,\n                description: settings.description,\n                ruleDisabled: false\n            }\n        };\n\n        var iot = new AWS.Iot();\n        iot.createTopicRule(params, function(err, data) {\n            if (err) {\n                return cb(err, null);\n            }\n\n            return cb(null, data);\n\n        });\n    };\n\n    /**\n     * Deletes an IoT topic rule. Stop gap for missing dynamoDBv2 in CFN.\n     * @param {string} settings - Settings for deletion of the IoT topic rule.\n     * @param {deleteTopicRule~requestCallback} cb - The callback that handles the response.\n     */\n    iotHelper.prototype.deleteTopicRule = function(settings, cb) {\n\n        var params = {\n            ruleName: settings.name\n        };\n\n        var iot = new AWS.Iot();\n        iot.deleteTopicRule(params, function(err, data) {\n            if (err) {\n                console.log(err);\n            }\n\n            return cb(null, data);\n\n        });\n    };\n\n    return iotHelper;\n\n})();\n\nmodule.exports = iotHelper;\n', 'kinesis-helper.js': '/*********************************************************************************************************************\n *  Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *\n *                                                                                                                    *\n *  Licensed under the Amazon Software License (the "License"). You may not use this file except in compliance        *\n *  with the License. A copy of the License is located at                                                             *\n *                                                                                                                    *\n *      http://aws.amazon.com/asl/                                                                                    *\n *                                                                                                                    *\n *  or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES *\n *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions    *\n *  and limitations under the License.                                                                                *\n *********************************************************************************************************************/\n\n/**\n * @author Solution Builders\n */\n\n\'use strict\';\n\nlet moment = require(\'moment\');\nlet AWS = require(\'aws-sdk\');\n\n/**\n * Helper function to interact with AWS IoT for cfn custom resource.\n *\n * @class iotHelper\n */\nlet kinesisHelper = (function() {\n\n    /**\n     * @class kinesisHelper\n     * @constructor\n     */\n    let kinesisHelper = function() {};\n\n    /**\n     * Creates an kinesis analytics application.\n     * @param {string} settings - Settings for creation of the kinesis analytics application.\n     * @param {createKinesisAnalyticsApp~requestCallback} cb - The callback that handles the response.\n     */\n    kinesisHelper.prototype.createKinesisAnalyticsApp = function(settings, cb) {\n\n        let _params = {\n            ApplicationName: settings.appName,\n            ApplicationDescription: \'This Amazon Kinesis Analaytics application detects anomalous oil temperatures for the connected vehicle platform\',\n            Inputs: [{\n                InputSchema: {\n                    RecordColumns: [{\n                        Name: \'ts\',\n                        SqlType: \'TIMESTAMP\',\n                        Mapping: \'$.timestamp\'\n                    }, {\n                        Name: \'trip_id\',\n                        SqlType: \'VARCHAR(64)\',\n                        Mapping: \'$.trip_id\'\n                    }, {\n                        Name: \'vin\',\n                        SqlType: \'VARCHAR(32)\',\n                        Mapping: \'$.vin\'\n                    }, {\n                        Name: \'name\',\n                        SqlType: \'VARCHAR(32)\',\n                        Mapping: \'$.name\'\n                    }, {\n                        Name: \'val\',\n                        SqlType: \'DOUBLE\',\n                        Mapping: \'$.value\'\n                    }, {\n                        Name: \'latitude\',\n                        SqlType: \'DOUBLE\',\n                        Mapping: \'$.latitude\'\n                    }, {\n                        Name: \'longitude\',\n                        SqlType: \'DOUBLE\',\n                        Mapping: \'$.longitude\'\n                    }],\n                    RecordFormat: {\n                        RecordFormatType: \'JSON\',\n                        MappingParameters: {\n                            JSONMappingParameters: {\n                                RecordRowPath: \'$\'\n                            }\n                        }\n                    },\n                    RecordEncoding: \'UTF-8\'\n                },\n                NamePrefix: \'SOURCE_SQL_STREAM\',\n                KinesisFirehoseInput: {\n                    ResourceARN: settings.deliveryStream,\n                    RoleARN: settings.roleArn\n                }\n            }],\n            Outputs: [{\n                DestinationSchema: {\n                    RecordFormatType: \'JSON\'\n                },\n                Name: \'ANOMALY_OUTPUT_STREAM\',\n                KinesisStreamsOutput: {\n                    ResourceARN: settings.anomalyStream,\n                    RoleARN: settings.roleArn\n                }\n            }],\n            ApplicationCode: \'CREATE OR REPLACE STREAM "TEMP_STREAM" ("ts" TIMESTAMP,"oil_temp" DOUBLE,"trip_id" VARCHAR(64),"vin" VARCHAR(32),"ANOMALY_SCORE" DOUBLE);\\r\\n\\\n              CREATE OR REPLACE STREAM "ANOMALY_STREAM" ("ts" TIMESTAMP,"oil_temp" DOUBLE,"trip_id" VARCHAR(64),"vin" VARCHAR(32),"ANOMALY_SCORE" DOUBLE);\\r\\n\\\n              CREATE OR REPLACE STREAM "ANOMALY_OUTPUT_STREAM" ("ts" TIMESTAMP,"value" DOUBLE,"trip_id" VARCHAR(64),"vin" VARCHAR(32),"ANOMALY_SCORE" DOUBLE, "telemetric" VARCHAR(32),"low_limit" INT);\\r\\n\\\n              -- Option 1 - Compute an anomaly score for each oil temperature record in the input stream using unsupervised machine learning algorithm, Random Cut Forest\\r\\n\\\n              --CREATE OR REPLACE PUMP "STREAM_PUMP" AS INSERT INTO "TEMP_STREAM" SELECT STREAM "ts","val", "trip_id", "vin", ANOMALY_SCORE FROM TABLE(RANDOM_CUT_FOREST(CURSOR(SELECT STREAM * FROM "SOURCE_SQL_STREAM_001" WHERE "name" = \\\'oil_temp\\\' AND "val" > 240),10,10,10,1));\\r\\n\\\n              -- Option 2 - Compute an anomaly score for each oil temperaure record in the input stream, where the anomaly is a simple diff between the observed oil temperature and a predefined average\\r\\n\\\n              CREATE OR REPLACE PUMP "STREAM_PUMP" AS INSERT INTO "TEMP_STREAM" SELECT STREAM "ts","val", "trip_id", "vin", ("val"-250) as ANOMALY_SCORE FROM "SOURCE_SQL_STREAM_001" WHERE "name" = \\\'oil_temp\\\';\\r\\n\\\n              CREATE OR REPLACE PUMP "ANOMALY_STREAM_PUMP" AS INSERT INTO "ANOMALY_STREAM" SELECT STREAM * FROM "TEMP_STREAM";\\r\\n\\\n              CREATE OR REPLACE PUMP "OUTPUT_PUMP" AS INSERT INTO "ANOMALY_OUTPUT_STREAM" SELECT STREAM *,\\\'oil_temp\\\' as telemetric, 250 as low_limit FROM "TEMP_STREAM" WHERE ANOMALY_SCORE > 30;\\r\\n\'\n        };\n\n        let kinesisAnalytics = new AWS.KinesisAnalytics();\n        kinesisAnalytics.createApplication(_params, function(err, data) {\n            if (err) {\n                console.log(err);\n                console.log(\'Could not create Amazon Kinesis Analytics application\');\n                return cb(err, null);\n            } else {\n                console.log(\'Amazon Kinesis Analytics application was successfully created\');\n                kinesisAnalytics.describeApplication({\n                    ApplicationName: settings.appName\n                }, function(err, appData) {\n                    if (err) {\n                        console.log(err);\n                        console.log(\'Could not start Amazon Kinesis Analytics application\');\n                        return cb(err, null);\n                    } else {\n                        console.log(\'Found Amazon Kinesis Analytics application input Id\');\n                        let appInputId = appData.ApplicationDetail.InputDescriptions[0].InputId;\n                        startKinesisAnalyticsApp({\n                            appName: settings.appName,\n                            appInputId: appInputId\n                        }, function(err, startData) {\n                            if (err) {\n                                return cb(err, null);\n                            }\n\n                            return cb(null, startData);\n                        });\n                    }\n                });\n            }\n        });\n\n    };\n\n    /**\n     * Deletes a kinesis analytics application.\n     * @param {string} settings - Settings for deletion of the kinesis analytics application.\n     * @param {deleteKinesisAnalyticsApp~requestCallback} cb - The callback that handles the response.\n     */\n    kinesisHelper.prototype.deleteKinesisAnalyticsApp = function(settings, cb) {\n\n        console.log(\'Preparing to delete Amazon Kinesis Analytics application\');\n        console.log("Getting the Amazon Kinesis Analytics applications");\n\n        let _params = {\n            ApplicationName: settings.appName\n        };\n\n        let kinesisAnalytics = new AWS.KinesisAnalytics();\n        kinesisAnalytics.describeApplication(_params, function(err, data) {\n            if (err) {\n                console.log(\n                    "Getting the Amazon Kinesis Analytics applications failed. Assuming it does not exist."\n                );\n                console.log(err);\n                // assume application does not exist\n                return cb(null, data);\n            } else {\n                console.log(data);\n                let _delete_params = {\n                    ApplicationName: settings.appName,\n                    CreateTimestamp: data.ApplicationDetail.CreateTimestamp\n                };\n                kinesisAnalytics.deleteApplication(_delete_params, function(err, deleteData) {\n                    if (err) {\n                        console.log("Deleting the Amazon Kinesis Analytics application failed.");\n                        console.log(err);\n                        // assume application does not exist\n                        return cb(err, null);\n                    } else {\n                        console.log(\n                            "Deleting the Amazon Kinesis Analytics application succeeded.");\n                        console.log(deleteData);\n                        return cb(null, deleteData);\n                    }\n                });\n            }\n        });\n    };\n\n    /**\n     * Start a kinesis analytics application.\n     * @param {string} settings - Settings for starting of the kinesis analytics application.\n     * @param {startKinesisAnalyticsApp~requestCallback} cb - The callback that handles the response.\n     */\n    let startKinesisAnalyticsApp = function(params, cb) {\n\n        console.log(\'Trying to start application\');\n        let kinesisAnalytics = new AWS.KinesisAnalytics();\n        kinesisAnalytics.startApplication({\n            ApplicationName: params.appName,\n            InputConfigurations: [{\n                Id: params.appInputId,\n                InputStartingPositionConfiguration: {\n                    InputStartingPosition: "NOW"\n                }\n            }]\n        }, function(err, data) {\n            if (err) {\n                console.log(err);\n                console.log(\'Could not start Amazon Kinesis Analytics application\');\n                return cb(err, null);\n            } else {\n                console.log(data);\n                console.log(\'Starting Amazon Kinesis Analytics application\');\n                return cb(null, data);\n            }\n        });\n    };\n\n    return kinesisHelper;\n\n})();\n\nmodule.exports = kinesisHelper;\n', 'metrics-helper.js': '/*********************************************************************************************************************\n *  Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *\n *                                                                                                                    *\n *  Licensed under the Amazon Software License (the "License"). You may not use this file except in compliance        *\n *  with the License. A copy of the License is located at                                                             *\n *                                                                                                                    *\n *      http://aws.amazon.com/asl/                                                                                    *\n *                                                                                                                    *\n *  or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES *\n *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions    *\n *  and limitations under the License.                                                                                *\n *********************************************************************************************************************/\n\n/**\n * @author Solution Builders\n */\n\n\'use strict\';\n\nlet moment = require(\'moment\');\nlet https = require(\'https\');\n\n/**\n * Helper function to interact with dynamodb for data lake cfn custom resource.\n *\n * @class metricsHelper\n */\nlet metricsHelper = (function() {\n\n    /**\n     * @class metricsHelper\n     * @constructor\n     */\n    let metricsHelper = function() {};\n\n    /**\n     * Sends opt-in, anonymous metric.\n     * @param {json} metric - metric to send to opt-in, anonymous collection.\n     * @param {sendAnonymousMetric~requestCallback} cb - The callback that handles the response.\n     */\n    metricsHelper.prototype.sendAnonymousMetric = function(metric, cb) {\n\n        let _options = {\n            hostname: \'metrics.awssolutionsbuilder.com\',\n            port: 443,\n            path: \'/generic\',\n            method: \'POST\',\n            headers: {\n                \'Content-Type\': \'application/json\'\n            }\n        };\n\n        let request = https.request(_options, function(response) {\n            // data is streamed in chunks from the server\n            // so we have to handle the "data" event\n            let buffer;\n            let data;\n            let route;\n\n            response.on(\'data\', function(chunk) {\n                buffer += chunk;\n            });\n\n            response.on(\'end\', function(err) {\n                data = buffer;\n                cb(null, data);\n            });\n        });\n\n        if (metric) {\n            request.write(JSON.stringify(metric));\n        }\n\n        request.end();\n\n        request.on(\'error\', (e) => {\n            console.error(e);\n            cb([\'Error occurred when sending metric request.\', JSON.stringify(_payload)].join(\' \'), null);\n        });\n    };\n\n    return metricsHelper;\n\n})();\n\nmodule.exports = metricsHelper;\n', 'marketing-pois.csv': 'va_rst_5,"11900 Market St, Reston, VA 20190",Reston,38.958439,-77.357138,Happy hour every weekday from 4-7pm. $2 off drinks and food,Dave\'s,500,VA\r\nva_rst_4,"12200 Sunset Hills Rd, Reston, VA 20190",Reston,38.954541,-77.366502,Show this message for free cornbread w/ purchase of any meal,Chris\' Famous BBQ,500,VA\r\nva_rst_3,"770 Elden St, Herndon, VA 20170",Herndon,38.969389,-77.386678,Now serving breakfast!,Sean\'s Place,500,VA\r\nva_rst_2,"1200 Elden St, Herndon, VA 20170",Herndon,38.967435,-77.396295,Open Mon-Sun 11am-10pm. Check out our menu:,Herndon Tacos,500,VA\r\nva_rst_1,"14000 Parcher Ave, Herndon, VA 20170",Herndon,38.95934,-77.403683,Book your holiday party and get a $50 gift card:,The Bar,500,VA\r\nva_ret_3,"2500 McNair Farms Dr, Herndon, VA 20171",Herndon,38.94567,-77.408112,Free oil change this month,Herndon Car Repair,500,VA\r\nva_ret_2,"1700 Reston Pkwy, Reston, VA 20194",Reston,38.968398,-77.354168,Huge discounts on last season\'s items:,Reston Home Store,500,VA\r\nva_ret_1,"400 Elden St, Herndon, VA 20170",Herndon,38.96679,-77.376669,Find over $300 in savings with this week\'s deals:,Herndon Grocery,500,VA\r\nva_rec_1,"11800 Sunrise Valley Dr, Reston, VA 20191",Reston,38.943114,-77.352458,Don\'t forget to register for the the town 5k this weekend!,Reston Town Park,500,VA\r\nva_edu_1,"700 Dranesville Rd, Herndon, VA 20170",Herndon,38.97674,-77.377427,"Parents, don\'t forget, no school this Friday. Enjoy your long weekend!",Town High School,500,VA\r\n,,,,,,,,', 'obd-trouble-codes.csv': '"P0100","Mass or Volume Air Flow Circuit Malfunction"\n"P0101","Mass or Volume Air Flow Circuit Range/Performance Problem"\n"P0102","Mass or Volume Air Flow Circuit Low Input"\n"P0103","Mass or Volume Air Flow Circuit High Input"\n"P0104","Mass or Volume Air Flow Circuit Intermittent"\n"P0105","Manifold Absolute Pressure/Barometric Pressure Circuit Malfunction"\n"P0106","Manifold Absolute Pressure/Barometric Pressure Circuit Range/Performance Problem"\n"P0107","Manifold Absolute Pressure/Barometric Pressure Circuit Low Input"\n"P0108","Manifold Absolute Pressure/Barometric Pressure Circuit High Input"\n"P0109","Manifold Absolute Pressure/Barometric Pressure Circuit Intermittent"\n"P0110","IAT Circuit Malfunction"\n"P0111","Intake Air Temperature Circuit Range/Performance Problem"\n"P0112","Intake Air Temperature Circuit Low Input"\n"P0113","Intake Air Temperature Circuit High Input"\n"P0114","Intake Air Temperature Circuit Intermittent"\n"P0115","Engine Coolant Temperature Circuit Malfunction"\n"P0116","Engine Coolant Temperature Circuit Range/Performance Problem"\n"P0117","Engine Coolant Temperature Circuit Low Input"\n"P0118","Engine Coolant Temperature Circuit High Input"\n"P0119","Engine Coolant Temperature Circuit Intermittent"\n"P0120","Throttle Position Sensor/Switch A Circuit Malfunction"\n"P0121","Throttle Position Sensor/Switch A Circuit Range/Performance Problem"\n"P0122","Throttle Position Sensor/Switch A Circuit Low Input"\n"P0123","Throttle Position Sensor/Switch A Circuit High Input"\n"P0124","Throttle Position Sensor/Switch A Circuit Intermittent"\n"P0125","Insufficient Coolant Temperature for Closed Loop Fuel Control;"\n"P0126","ECT Excessive Time to Closed Loop Fuel Control"\n"P0128","Insufficient Coolant Temperature for Stable Operation"\n"P0130","Coolant Thermostat Malfunction"\n', 'package.json': '{\n    "name": "vhr-vehicle-service",\n    "description": "A Lambda function for the vehicle microservice",\n    "main": "index.js",\n    "author": {\n        "name": "aws-solutions-builder"\n    },\n    "version": "0.0.1",\n    "private": "true",\n    "dependencies": {\n        "aws-sdk": "*",\n        "moment": "*",\n        "shortid": "*",\n        "underscore": "*"\n    },\n    "devDependencies": {\n        "chai": "*",\n        "sinon": "*",\n        "sinon-chai": "*",\n        "mocha": "*",\n        "aws-sdk-mock": "*",\n        "npm-run-all": "*",\n        "proxyquire": "*"\n    },\n    "scripts": {\n        "pretest": "npm install",\n        "test": "env VEHICLE_ANOMALY_TBL=\'tblanomaly\' VEHICLE_OWNER_TBL=\'tblowner\' HEALTH_REPORT_TBL=\'tblhealthreport\' mocha lib/*.spec.js",\n        "build-init": "rm -rf dist && rm -f archive.zip && mkdir dist && mkdir dist/lib",\n        "build:copy": "cp index.js dist/ && cp -r lib/*.js dist/lib",\n        "build:install": "cp package.json dist/ && cd dist && npm install --production",\n        "build": "npm-run-all -s build-init build:copy build:install",\n        "zip": "cd dist && zip -rq vhr-vehicle-service.zip ."\n    },\n    "bundledDependencies": [\n        "moment",\n        "shortid",\n        "underscore"\n    ]\n}\n', 'anomaly.js': '/*********************************************************************************************************************\n *  Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *\n *                                                                                                                    *\n *  Licensed under the Amazon Software License (the "License"). You may not use this file except in compliance        *\n *  with the License. A copy of the License is located at                                                             *\n *                                                                                                                    *\n *      http://aws.amazon.com/asl/                                                                                    *\n *                                                                                                                    *\n *  or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES *\n *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions    *\n *  and limitations under the License.                                                                                *\n *********************************************************************************************************************/\n\n/**\n * @author Solution Builders\n */\n\n\'use strict\';\n\nlet shortid = require(\'shortid\');\nlet moment = require(\'moment\');\nlet _ = require(\'underscore\');\nlet AWS = require(\'aws-sdk\');\n\nlet creds = new AWS.EnvironmentCredentials(\'AWS\'); // Lambda provided credentials\nconst dynamoConfig = {\n    credentials: creds,\n    region: process.env.AWS_REGION\n};\nconst ddbTable = process.env.VEHICLE_ANOMALY_TBL;\nconst ownerTable = process.env.VEHICLE_OWNER_TBL;\n\n/**\n * Performs operations for anomaly management actions interfacing primiarly with\n * Amazon DynamoDB table.\n *\n * @class anomaly\n */\nlet anomaly = (function() {\n\n    /**\n     * @class anomaly\n     * @constructor\n     */\n    let anomaly = function() {};\n\n    /**\n     * Retrieves the anomaly records for a user\'s vehicles.\n     * @param {JSON} ticket - authentication ticket\n     * @param {string} vin - vehicle identification number\n     * @param {listVehicles~callback} cb - The callback that handles the response.\n     */\n    anomaly.prototype.listAnomaliesByVehicle = function(ticket, vin, cb) {\n\n        // verify user owns vehicle\n        let params = {\n            TableName: ownerTable,\n            Key: {\n                owner_id: ticket[\'cognito:username\'],\n                vin: vin\n            }\n        };\n\n        let docClient = new AWS.DynamoDB.DocumentClient(dynamoConfig);\n        docClient.get(params, function(err, data) {\n            if (err) {\n                console.log(err);\n                return cb(err, null);\n            }\n\n            if (!_.isEmpty(data)) {\n                var anomaly_params = {\n                    TableName: ddbTable,\n                    KeyConditionExpression: \'vin = :vin\',\n                    ExpressionAttributeValues: {\n                        \':vin\': vin\n                    }\n                };\n\n                let docClient = new AWS.DynamoDB.DocumentClient(dynamoConfig);\n                docClient.query(anomaly_params, function(err, anomaly_data) {\n                    if (err) {\n                        console.log(err);\n                        return cb(err, null);\n                    }\n\n                    return cb(null, anomaly_data);\n                });\n            } else {\n                return cb({\n                    error: {\n                        message: \'The vehicle requested is not registered under the user.\'\n                    }\n                }, null);\n            }\n        });\n\n    };\n\n    /**\n     * Retrieves a specific anomaly record for a user\'s registered vehicle.\n     * @param {JSON} ticket - authentication ticket\n     * @param {string} vin - vehicle identification number\n     * @param {string} anomalyId - Anomaly record id\n     * @param {getVehicle~callback} cb - The callback that handles the response.\n     */\n    anomaly.prototype.getVehicleAnomaly = function(ticket, vin, anomalyId, cb) {\n\n        // verify user owns vehicle\n        let params = {\n            TableName: ownerTable,\n            Key: {\n                owner_id: ticket[\'cognito:username\'],\n                vin: vin\n            }\n        };\n\n        let docClient = new AWS.DynamoDB.DocumentClient(dynamoConfig);\n        docClient.get(params, function(err, data) {\n            if (err) {\n                console.log(err);\n                return cb(err, null);\n            }\n\n            if (!_.isEmpty(data)) {\n                let anomaly_params = {\n                    TableName: ddbTable,\n                    Key: {\n                        vin: vin,\n                        anomaly_id: anomalyId\n                    }\n                };\n\n                let docClient = new AWS.DynamoDB.DocumentClient(dynamoConfig);\n                docClient.get(anomaly_params, function(err, anomaly_data) {\n                    if (err) {\n                        console.log(err);\n                        return cb(err, null);\n                    }\n\n                    if (!_.isEmpty(anomaly_data)) {\n                        return cb(null, anomaly_data.Item);\n                    } else {\n                        return cb({\n                            error: {\n                                message: \'The anomaly record requested does not exist.\'\n                            }\n                        }, null);\n                    }\n                });\n            } else {\n                return cb({\n                    error: {\n                        message: \'The vehicle requested is not registered under the user.\'\n                    }\n                }, null);\n            }\n        });\n\n    };\n\n    /**\n     * Acknowledges a specific anomaly record for a user\'s registered vehicle.\n     * @param {JSON} ticket - authentication ticket\n     * @param {string} vin - vehicle identification number\n     * @param {string} anomalyId - Anomaly record id\n     * @param {getVehicle~callback} cb - The callback that handles the response.\n     */\n    anomaly.prototype.acknowledgeVehicleAnomaly = function(ticket, vin, anomalyId, cb) {\n\n        // verify user owns vehicle\n        let params = {\n            TableName: ownerTable,\n            Key: {\n                owner_id: ticket[\'cognito:username\'],\n                vin: vin\n            }\n        };\n\n        let docClient = new AWS.DynamoDB.DocumentClient(dynamoConfig);\n        docClient.get(params, function(err, data) {\n            if (err) {\n                console.log(err);\n                return cb(err, null);\n            }\n\n            if (!_.isEmpty(data)) {\n                let anomaly_params = {\n                    TableName: ddbTable,\n                    Key: {\n                        vin: vin,\n                        anomaly_id: anomalyId\n                    }\n                };\n\n                let docClient = new AWS.DynamoDB.DocumentClient(dynamoConfig);\n                docClient.get(anomaly_params, function(err, anomaly_data) {\n                    if (err) {\n                        console.log(err);\n                        return cb(err, null);\n                    }\n\n                    if (!_.isEmpty(anomaly_data)) {\n\n                        anomaly_data.Item.acknowledged = true;\n\n                        let updateparams = {\n                            TableName: ddbTable,\n                            Item: anomaly_data.Item\n                        };\n\n                        docClient.put(updateparams, function(err, data) {\n                            if (err) {\n                                console.log(err);\n                                return cb(err, null);\n                            }\n\n                            return cb(null, anomaly_data.Item);\n                        });\n                    } else {\n                        return cb({\n                            error: {\n                                message: \'The anomaly record requested does not exist.\'\n                            }\n                        }, null);\n                    }\n                });\n            } else {\n                return cb({\n                    error: {\n                        message: \'The vehicle requested is not registered under the user.\'\n                    }\n                }, null);\n            }\n        });\n\n    };\n\n    return anomaly;\n\n})();\n\nmodule.exports = anomaly;\n', 'anomaly.spec.js': "'use strict';\n\nlet assert = require('chai').assert;\nlet expect = require('chai').expect;\nlet path = require('path');\nlet AWS = require('aws-sdk-mock');\nAWS.setSDK(path.resolve('./node_modules/aws-sdk'));\n\nlet Anomaly = require('./anomaly.js');\n\ndescribe('anomaly', function() {\n\n    describe('#listDtcByVehicle', function() {\n\n        let _test_vehicle = {\n            owner: 'user_test_com',\n            vin: 'SAMPLEVIN123',\n            nickname: 'Test Vehicle',\n            odometer: 123\n        };\n\n        let _test_anomaly = {\n            acknowledged: false,\n            anomaly_id: 'TEST123',\n            vin: 'SAMPLEVIN123'\n        };\n\n        let _ticket = {\n            'cognito:username': 'user_test_com'\n        };\n\n        beforeEach(function() {});\n\n        afterEach(function() {\n            AWS.restore('DynamoDB.DocumentClient');\n        });\n\n        it('should return list of dtc records when ddb query is successful', function(done) {\n\n            AWS.mock('DynamoDB.DocumentClient', 'get', function(params, callback) {\n                callback(null, {\n                    Item: _test_vehicle\n                });\n            });\n\n            AWS.mock('DynamoDB.DocumentClient', 'query', function(params, callback) {\n                callback(null, {\n                    Items: [_test_anomaly]\n                });\n            });\n\n            let _anomaly = new Anomaly();\n            _anomaly.listAnomaliesByVehicle(_ticket, _test_vehicle.vin, function(err, data) {\n                if (err) done(err);\n                else {\n                    assert.equal(data.Items.length, 1);\n                    done();\n                }\n            });\n        });\n\n        it('should return error information when ddb query fails', function(done) {\n\n            AWS.mock('DynamoDB.DocumentClient', 'get', function(params, callback) {\n                callback(null, {\n                    Item: _test_vehicle\n                });\n            });\n\n            AWS.mock('DynamoDB.DocumentClient', 'query', function(params, callback) {\n                callback('error', null);\n            });\n\n            let _anomaly = new Anomaly();\n            _anomaly.listAnomaliesByVehicle(_ticket, _test_vehicle.vin, function(err, data) {\n                if (err) {\n                    expect(err).to.equal('error');\n                    done();\n                } else {\n                    done('invalid failure for negative test');\n                }\n            });\n\n        });\n    });\n\n    describe('#getVehicleAnomaly', function() {\n\n        let _test_vehicle = {\n            owner: 'user_test_com',\n            vin: 'SAMPLEVIN123',\n            nickname: 'Test Vehicle',\n            odometer: 123\n        };\n\n        let _test_anomaly = {\n            acknowledged: false,\n            anomaly_id: 'TEST123',\n            vin: 'SAMPLEVIN123'\n        };\n\n        let _ticket = {\n            'cognito:username': 'user_test_com'\n        };\n\n        beforeEach(function() {});\n\n        afterEach(function() {\n            AWS.restore('DynamoDB.DocumentClient');\n        });\n\n        it('should return a anomaly when ddb get is successful', function(done) {\n\n            AWS.mock('DynamoDB.DocumentClient', 'get', function(params, callback) {\n                if (params.TableName === 'tblowner') {\n                    callback(null, {\n                        Item: _test_vehicle\n                    });\n                } else {\n                    callback(null, {\n                        Item: _test_anomaly\n                    });\n                }\n            });\n\n            let _anomaly = new Anomaly();\n            _anomaly.getVehicleAnomaly(_ticket, _test_vehicle.vin, _test_anomaly.anomaly_id,\n                function(err, data) {\n                    if (err) done(err);\n                    else {\n                        assert.equal(data, _test_anomaly);\n                        done();\n                    }\n                });\n        });\n\n        it('should return error information when ddb get fails', function(done) {\n\n            AWS.mock('DynamoDB.DocumentClient', 'get', function(params, callback) {\n                if (params.TableName === 'tblowner') {\n                    callback(null, {\n                        Item: _test_vehicle\n                    });\n                } else {\n                    callback('error', null);\n                }\n            });\n\n            let _anomaly = new Anomaly();\n            _anomaly.getVehicleAnomaly(_ticket, _test_vehicle.vin, _test_anomaly.anomaly_id,\n                function(err, data) {\n\n                    if (err) {\n                        expect(err).to.equal('error');\n                        done();\n                    } else {\n                        done('invalid failure for negative test');\n                    }\n                });\n        });\n    });\n\n});\n", 'test-setup.spec.js': "const sinon = require('sinon');\nconst chai = require('chai');\nconst sinonChai = require('sinon-chai');\n\nbefore(function() {\n    chai.use(sinonChai);\n});\n\nbeforeEach(function() {\n    this.sandbox = sinon.sandbox.create();\n});\n\nafterEach(function() {\n    this.sandbox.restore();\n});\n", 'driver-safety.js': '/*********************************************************************************************************************\n *  Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *\n *                                                                                                                    *\n *  Licensed under the Amazon Software License (the "License"). You may not use this file except in compliance        *\n *  with the License. A copy of the License is located at                                                             *\n *                                                                                                                    *\n *      http://aws.amazon.com/asl/                                                                                    *\n *                                                                                                                    *\n *  or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES *\n *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions    *\n *  and limitations under the License.                                                                                *\n *********************************************************************************************************************/\n\n/**\n * @author Solution Builders\n */\n\n\'use strict\';\n\nlet shortid = require(\'shortid\');\nlet moment = require(\'moment\');\nlet _ = require(\'underscore\');\nlet AWS = require(\'aws-sdk\');\n\nlet creds = new AWS.EnvironmentCredentials(\'AWS\'); // Lambda provided credentials\nconst dynamoConfig = {\n    credentials: creds,\n    region: process.env.AWS_REGION\n};\nconst ddbTable = process.env.VEHICLE_TRIP_TBL;\n\n/**\n * Performs operations for driver safety recording and management actions interfacing primiarly with\n * Amazon DynamoDB table.\n *\n * @class dtc\n */\nlet driversafety = (function() {\n\n    /**\n     * @class driversafety\n     * @constructor\n     */\n    let driversafety = function() {};\n\n    /**\n     * Update the vehicle trip table with the driver safety score.\n     * @param {payload} payload - trip aggregation data payload\n     * @param {updateVehicleTrip~callback} cb - The callback that handles the response.\n     */\n    driversafety.prototype.updateVehicleTrip = function(payload, cb) {\n\n        let params = {\n            TableName: ddbTable,\n            Item: payload\n        };\n\n        let docClient = new AWS.DynamoDB.DocumentClient(dynamoConfig);\n        docClient.put(params, function(err, data) {\n            if (err) {\n                console.log(err);\n                return cb(err, null);\n            }\n\n            return cb(null, {\n                result: \'success\'\n            });\n        });\n\n    };\n\n    /**\n     * Retrieve the driver safety score categorization predication.\n     * @param {payload} payload - trip aggregation data payload\n     * @param {getDriverScorePrediction~callback} cb - The callback that handles the response.\n     */\n    driversafety.prototype.getDriverScorePrediction = function(payload, cb) {\n\n        let _this = this;\n\n        let _triptime = moment(payload.end_time).diff(moment(payload.start_time));\n        let _timedelta = (_triptime - payload.idle_duration) / _triptime;\n        let _odometer = Math.ceil(payload.odometer);\n\n        // payload.driver_safety_score = ((_timedelta +\n        //     ((_odometer - payload.high_braking_event) / _odometer) +\n        //     ((_odometer - payload.high_acceleration_event) / _odometer) +\n        //     ((payload.high_speed_duration / _triptime) * _odometer)) / 4) * 100;\n        //((_odometer - payload.high_speed_duration) / _odometer)) / 4) * 100;\n\n        let _raw_score = (_timedelta +\n            Math.abs(((_odometer - payload.high_braking_event) / _odometer)) +\n            Math.abs(((_odometer - payload.high_acceleration_event) / _odometer)) +\n            ((payload.high_speed_duration / _triptime) * _odometer)) / 4;\n\n        if (_raw_score > 1) {\n            _raw_score = _raw_score / 100;\n        }\n\n        payload.driver_safety_score = _raw_score * 100;\n\n        _this.updateVehicleTrip(payload, function(err, data) {\n            if (err) {\n                console.log(err);\n                return cb(err, null);\n            }\n\n            let _score = {\n                score: Number(Math.round(payload.driver_safety_score + \'e\' + 1) + \'e-\' + 1),\n                high_acceleration_events: payload.high_acceleration_event,\n                high_braking_events: payload.high_braking_event,\n                high_speed_duration: payload.high_speed_duration,\n                vehicle_speed_mean: payload.vehicle_speed_mean,\n                milage: payload.odometer\n            };\n\n            let _mobile = [\n                \'Connected Car Notification. Your driver score for your last trip was \',\n                _score.score, \'.\'\n            ].join(\' \');\n\n            let _message = {\n                type: \'driverscore\',\n                mobile: _mobile,\n                mqtt: _score\n            }\n\n            sendNotification(payload.vin, _message, function(err, msg_data) {\n                if (err) {\n                    console.log(err);\n                    return cb(err, null);\n                }\n\n                return cb(null, data);\n            });\n        });\n\n        // let machinelearning = new AWS.MachineLearning();\n        //\n        // var params = {\n        //     MLModelId: process.env.MODEL_ID,\n        //     PredictEndpoint: process.env.PREDICTION_ENDPOINT,\n        //     Record: {\n        //         high_acceleration_events: payload.high_acceleration_event.toString(),\n        //         high_braking_events: payload.high_braking_event.toString(),\n        //         high_speed_duration: payload.high_speed_duration.toString(),\n        //         idle_duration: payload.idle_duration.toString(),\n        //         odometer: payload.odometer.toString(),\n        //         vehicle_speed_mean: payload.vehicle_speed_mean.toString()\n        //     }\n        // };\n        // machinelearning.predict(params, function(err, prediction) {\n        //     if (err) {\n        //         console.log(err);\n        //         payload.driver_safety_score = \'NA\';\n        //     } else {\n        //         payload.driver_safety_score = prediction.Prediction.predictedValue;\n        //     }\n        //\n        //     _this.updateVehicleTrip(payload, function(err, data) {\n        //         if (err) {\n        //             console.log(err);\n        //             return cb(err, null);\n        //         }\n        //\n        //         let _score = Number(Math.round(payload.driver_safety_score + \'e\' + 1) + \'e-\' + 1);\n        //         let _mobile = [\n        //             \'Connected Car Notification. Your driver score for your last trip was \',\n        //             _score, \'.\'\n        //         ].join(\' \');\n        //\n        //         let _message = {\n        //             type: \'driverscore\',\n        //             mobile: _mobile,\n        //             mqtt: _score\n        //         }\n        //\n        //         sendNotification(payload.vin, _message, function(err, msg_data) {\n        //             if (err) {\n        //                 console.log(err);\n        //                 return cb(err, null);\n        //             }\n        //\n        //             return cb(null, data);\n        //         });\n        //     });\n        //\n        // });\n    };\n\n    let sendNotification = function(vin, message, cb) {\n        let _payload = {\n            vin: vin,\n            message: message\n        };\n\n        let params = {\n            FunctionName: process.env.NOTIFICATION_SERVICE,\n            InvocationType: \'Event\',\n            LogType: \'None\',\n            Payload: JSON.stringify(_payload)\n        };\n        let lambda = new AWS.Lambda();\n        lambda.invoke(params, function(err, data) {\n            if (err) {\n                console.log(\'Error occured when triggering notification service.\', err);\n            }\n\n            return cb(null, \'notification transmission triggered\');\n        });\n    };\n\n    return driversafety;\n\n})();\n\nmodule.exports = driversafety;\n', 'driver-safety.spec.js': "'use strict';\n\nlet assert = require('chai').assert;\nlet expect = require('chai').expect;\nlet path = require('path');\nlet AWS = require('aws-sdk-mock');\nAWS.setSDK(path.resolve('./node_modules/aws-sdk'));\n\nlet DriverSafety = require('./driver-safety.js');\n\ndescribe('driversafety', function() {\n\n    describe('#updateVehicleTrip', function() {\n\n        let payload = {\n            vin: 'SAMPLEVIN123',\n            trip_id: 'TRIPID123'\n        };\n\n        beforeEach(function() {});\n\n        afterEach(function() {\n            AWS.restore('DynamoDB.DocumentClient');\n        });\n\n        it('should return success when ddb update is successful', function(done) {\n\n            AWS.mock('DynamoDB.DocumentClient', 'put', function(params, callback) {\n                callback(null, {\n                    result: 'success'\n                });\n            });\n\n            let _driverSafety = new DriverSafety();\n            _driverSafety.updateVehicleTrip(payload, function(err, data) {\n                if (err) done(err);\n                else {\n                    assert.equal(data.result, 'success');\n                    done();\n                }\n            });\n        });\n\n        it('should return error information when ddb update fails', function(done) {\n\n            AWS.mock('DynamoDB.DocumentClient', 'put', function(params, callback) {\n                callback('error', null);\n            });\n\n            let _driverSafety = new DriverSafety();\n            _driverSafety.updateVehicleTrip(payload, function(err, data) {\n                if (err) {\n                    expect(err).to.equal('error');\n                    done();\n                } else {\n                    done('invalid failure for negative test');\n                }\n            });\n\n        });\n    });\n\n    describe('#getDriverScorePrediction', function() {\n\n        let payload = {\n            vin: 'SAMPLEVIN123',\n            trip_id: 'TRIPID123'\n        };\n\n        beforeEach(function() {});\n\n        afterEach(function() {\n            AWS.restore('DynamoDB.DocumentClient');\n        });\n\n        it('should return success when driver prediction and update are successful', function(done) {\n\n            AWS.mock('DynamoDB.DocumentClient', 'put', function(params, callback) {\n                callback(null, {\n                    result: 'success'\n                });\n            });\n\n            let _driverSafety = new DriverSafety();\n            _driverSafety.updateVehicleTrip(payload, function(err, data) {\n                if (err) done(err);\n                else {\n                    assert.equal(data.result, 'success');\n                    done();\n                }\n            });\n        });\n\n        it('should return error information when driver prediction or update fails', function(done) {\n\n            AWS.mock('DynamoDB.DocumentClient', 'put', function(params, callback) {\n                callback('error', null);\n            });\n\n            let _driverSafety = new DriverSafety();\n            _driverSafety.updateVehicleTrip(payload, function(err, data) {\n                if (err) {\n                    expect(err).to.equal('error');\n                    done();\n                } else {\n                    done('invalid failure for negative test');\n                }\n            });\n\n        });\n    });\n\n});\n", 'dtc.js': '/*********************************************************************************************************************\n *  Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *\n *                                                                                                                    *\n *  Licensed under the Amazon Software License (the "License"). You may not use this file except in compliance        *\n *  with the License. A copy of the License is located at                                                             *\n *                                                                                                                    *\n *      http://aws.amazon.com/asl/                                                                                    *\n *                                                                                                                    *\n *  or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES *\n *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions    *\n *  and limitations under the License.                                                                                *\n *********************************************************************************************************************/\n\n/**\n * @author Solution Builders\n */\n\n\'use strict\';\n\nlet shortid = require(\'shortid\');\nlet moment = require(\'moment\');\nlet _ = require(\'underscore\');\nlet AWS = require(\'aws-sdk\');\n\nlet creds = new AWS.EnvironmentCredentials(\'AWS\'); // Lambda provided credentials\nconst dynamoConfig = {\n    credentials: creds,\n    region: process.env.AWS_REGION\n};\nconst ddbTable = process.env.VEHICLE_DTC_TBL;\nconst ownerTable = process.env.VEHICLE_OWNER_TBL;\n\n/**\n * Performs operations for dtc management actions interfacing primiarly with\n * Amazon DynamoDB table.\n *\n * @class dtc\n */\nlet dtc = (function() {\n\n    /**\n     * @class dtc\n     * @constructor\n     */\n    let dtc = function() {};\n\n    /**\n     * Retrieves the dtc records for a user\'s vehicles.\n     * @param {JSON} ticket - authentication ticket\n     * @param {string} vin - vehicle identification number\n     * @param {listVehicles~callback} cb - The callback that handles the response.\n     */\n    dtc.prototype.listDtcByVehicle = function(ticket, vin, cb) {\n\n        // verify user owns vehicle\n        let params = {\n            TableName: ownerTable,\n            Key: {\n                owner_id: ticket[\'cognito:username\'],\n                vin: vin\n            }\n        };\n\n        let docClient = new AWS.DynamoDB.DocumentClient(dynamoConfig);\n        docClient.get(params, function(err, data) {\n            if (err) {\n                console.log(err);\n                return cb(err, null);\n            }\n\n            if (!_.isEmpty(data)) {\n                var dtc_params = {\n                    TableName: ddbTable,\n                    KeyConditionExpression: \'vin = :vin\',\n                    ExpressionAttributeValues: {\n                        \':vin\': vin\n                    }\n                };\n\n                let docClient = new AWS.DynamoDB.DocumentClient(dynamoConfig);\n                docClient.query(dtc_params, function(err, dtc_data) {\n                    if (err) {\n                        console.log(err);\n                        return cb(err, null);\n                    }\n\n                    return cb(null, dtc_data);\n                });\n            } else {\n                return cb({\n                    error: {\n                        message: \'The vehicle requested is not registered under the user.\'\n                    }\n                }, null);\n            }\n        });\n\n    };\n\n    /**\n     * Retrieves a specific dtc record for a user\'s registered vehicle.\n     * @param {JSON} ticket - authentication ticket\n     * @param {string} vin - vehicle identification number\n     * @param {string} dtcId - DTC record id\n     * @param {getVehicle~callback} cb - The callback that handles the response.\n     */\n    dtc.prototype.getVehicleDtc = function(ticket, vin, dtcId, cb) {\n\n        // verify user owns vehicle\n        let params = {\n            TableName: ownerTable,\n            Key: {\n                owner_id: ticket[\'cognito:username\'],\n                vin: vin\n            }\n        };\n\n        let docClient = new AWS.DynamoDB.DocumentClient(dynamoConfig);\n        docClient.get(params, function(err, data) {\n            if (err) {\n                console.log(err);\n                return cb(err, null);\n            }\n\n            if (!_.isEmpty(data)) {\n                let dtc_params = {\n                    TableName: ddbTable,\n                    Key: {\n                        vin: vin,\n                        dtc_id: dtcId\n                    }\n                };\n\n                let docClient = new AWS.DynamoDB.DocumentClient(dynamoConfig);\n                docClient.get(dtc_params, function(err, dtc_data) {\n                    if (err) {\n                        console.log(err);\n                        return cb(err, null);\n                    }\n\n                    if (!_.isEmpty(dtc_data)) {\n                        return cb(null, dtc_data.Item);\n                    } else {\n                        return cb({\n                            error: {\n                                message: \'The dtc record requested does not exist.\'\n                            }\n                        }, null);\n                    }\n                });\n            } else {\n                return cb({\n                    error: {\n                        message: \'The vehicle requested is not registered under the user.\'\n                    }\n                }, null);\n            }\n        });\n\n    };\n\n    /**\n     * Acknowledges a specific dtc record for a user\'s registered vehicle.\n     * @param {JSON} ticket - authentication ticket\n     * @param {string} vin - vehicle identification number\n     * @param {string} dtcId - DTC record id\n     * @param {getVehicle~callback} cb - The callback that handles the response.\n     */\n    dtc.prototype.acknowledgeVehicleDtc = function(ticket, vin, dtcId, cb) {\n\n        // verify user owns vehicle\n        let params = {\n            TableName: ownerTable,\n            Key: {\n                owner_id: ticket[\'cognito:username\'],\n                vin: vin\n            }\n        };\n\n        let docClient = new AWS.DynamoDB.DocumentClient(dynamoConfig);\n        docClient.get(params, function(err, data) {\n            if (err) {\n                console.log(err);\n                return cb(err, null);\n            }\n\n            if (!_.isEmpty(data)) {\n                let dtc_params = {\n                    TableName: ddbTable,\n                    Key: {\n                        vin: vin,\n                        dtc_id: dtcId\n                    }\n                };\n\n                let docClient = new AWS.DynamoDB.DocumentClient(dynamoConfig);\n                docClient.get(dtc_params, function(err, dtc_data) {\n                    if (err) {\n                        console.log(err);\n                        return cb(err, null);\n                    }\n\n                    if (!_.isEmpty(dtc_data)) {\n\n                        dtc_data.Item.acknowledged = true;\n\n                        let updateparams = {\n                            TableName: ddbTable,\n                            Item: dtc_data.Item\n                        };\n\n                        docClient.put(updateparams, function(err, data) {\n                            if (err) {\n                                console.log(err);\n                                return cb(err, null);\n                            }\n\n                            return cb(null, dtc_data.Item);\n                        });\n                    } else {\n                        return cb({\n                            error: {\n                                message: \'The dtc record requested does not exist.\'\n                            }\n                        }, null);\n                    }\n                });\n            } else {\n                return cb({\n                    error: {\n                        message: \'The vehicle requested is not registered under the user.\'\n                    }\n                }, null);\n            }\n        });\n\n    };\n\n    return dtc;\n\n})();\n\nmodule.exports = dtc;\n', 'dtc.spec.js': "'use strict';\n\nlet assert = require('chai').assert;\nlet expect = require('chai').expect;\nlet path = require('path');\nlet AWS = require('aws-sdk-mock');\nAWS.setSDK(path.resolve('./node_modules/aws-sdk'));\n\nlet Dtc = require('./dtc.js');\n\ndescribe('vehicle', function() {\n\n    describe('#listDtcByVehicle', function() {\n\n        let _test_vehicle = {\n            owner: 'user_test_com',\n            vin: 'SAMPLEVIN123',\n            nickname: 'Test Vehicle',\n            odometer: 123\n        };\n\n        let _test_dtc = {\n            acknowledged: false,\n            created_at: '2017-04-27T14:49:36Z',\n            udpated_at: '2017-04-27T14:49:36Z',\n            generated: '2017-04-27T14:49:34Z',\n            description: 'No description available.',\n            description: 'No description available.',\n            dtc: 'P0485',\n            dtc_id: 'TEST123',\n            vin: 'SAMPLEVIN123',\n            steps: []\n        };\n\n        let _ticket = {\n            'cognito:username': 'user_test_com'\n        };\n\n        beforeEach(function() {});\n\n        afterEach(function() {\n            AWS.restore('DynamoDB.DocumentClient');\n        });\n\n        it('should return list of dtc records when ddb query is successful', function(done) {\n\n            AWS.mock('DynamoDB.DocumentClient', 'get', function(params, callback) {\n                callback(null, {\n                    Item: _test_vehicle\n                });\n            });\n\n            AWS.mock('DynamoDB.DocumentClient', 'query', function(params, callback) {\n                callback(null, {\n                    Items: [_test_dtc]\n                });\n            });\n\n            let _dtc = new Dtc();\n            _dtc.listDtcByVehicle(_ticket, _test_vehicle.vin, function(err, data) {\n                if (err) done(err);\n                else {\n                    assert.equal(data.Items.length, 1);\n                    done();\n                }\n            });\n        });\n\n        it('should return error information when ddb query fails', function(done) {\n\n            AWS.mock('DynamoDB.DocumentClient', 'get', function(params, callback) {\n                callback(null, {\n                    Item: _test_vehicle\n                });\n            });\n\n            AWS.mock('DynamoDB.DocumentClient', 'query', function(params, callback) {\n                callback('error', null);\n            });\n\n            let _dtc = new Dtc();\n            _dtc.listDtcByVehicle(_ticket, _test_vehicle.vin, function(err, data) {\n                if (err) {\n                    expect(err).to.equal('error');\n                    done();\n                } else {\n                    done('invalid failure for negative test');\n                }\n            });\n\n        });\n    });\n\n    // describe('#getVehicleDtc', function() {\n    //\n    //     let _test_vehicle = {\n    //         owner: 'user_test_com',\n    //         vin: 'SAMPLEVIN123',\n    //         nickname: 'Test Vehicle',\n    //         odometer: 123\n    //     };\n    //\n    //     let _test_dtc = {\n    //         acknowledged: false,\n    //         created_at: '2017-04-27T14:49:36Z',\n    //         udpated_at: '2017-04-27T14:49:36Z',\n    //         generated: '2017-04-27T14:49:34Z',\n    //         description: 'No description available.',\n    //         description: 'No description available.',\n    //         dtc: 'P0485',\n    //         dtc_id: 'TEST123',\n    //         vin: 'SAMPLEVIN123',\n    //         steps: []\n    //     };\n    //\n    //     let _ticket = {\n    //         'cognito:username': 'user_test_com'\n    //     };\n    //\n    //     beforeEach(function() {});\n    //\n    //     afterEach(function() {\n    //         AWS.restore('DynamoDB.DocumentClient');\n    //     });\n    //\n    //     it('should return a vehicle when ddb get is successful', function(done) {\n    //\n    //         AWS.mock('DynamoDB.DocumentClient', 'get', function(params, callback) {\n    //             callback(null, {\n    //                 Item: _test_vehicle\n    //             });\n    //         });\n    //\n    //         AWS.mock('DynamoDB.DocumentClient', 'get', function(params, callback) {\n    //             callback(null, {\n    //                 Item: _test_vehicle\n    //             });\n    //         });\n    //\n    //         let _vehicle = new Vehicle();\n    //         _vehicle.getVehicle(_ticket, _test_vehicle.vin, function(err, data) {\n    //             if (err) done(err);\n    //             else {\n    //                 assert.equal(data, _test_vehicle);\n    //                 done();\n    //             }\n    //         });\n    //     });\n    //\n    //     it('should return error information when ddb get fails', function(done) {\n    //\n    //         AWS.mock('DynamoDB.DocumentClient', 'get', function(params, callback) {\n    //             callback('error', null);\n    //         });\n    //\n    //         let _vehicle = new Vehicle();\n    //         _vehicle.getVehicle(_ticket, _test_vehicle.vin, function(err, data) {\n    //             if (err) {\n    //                 expect(err).to.equal('error');\n    //                 done();\n    //             } else {\n    //                 done('invalid failure for negative test');\n    //             }\n    //         });\n    //\n    //     });\n    // });\n\n});\n", 'marketing.js': '/*********************************************************************************************************************\n *  Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *\n *                                                                                                                    *\n *  Licensed under the Amazon Software License (the "License"). You may not use this file except in compliance        *\n *  with the License. A copy of the License is located at                                                             *\n *                                                                                                                    *\n *      http://aws.amazon.com/asl/                                                                                    *\n *                                                                                                                    *\n *  or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES *\n *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions    *\n *  and limitations under the License.                                                                                *\n *********************************************************************************************************************/\n\n/**\n * @author Solution Builders\n */\n\n\'use strict\';\n\nlet geolib = require(\'geolib\');\nlet AWS = require(\'aws-sdk\');\nlet moment = require(\'moment\');\nlet _ = require(\'underscore\');\nlet creds = new AWS.EnvironmentCredentials(\'AWS\');\n\nconst marketingTable = process.env.MKT_TBL;\nconst poiTable = process.env.POI_TBL;\nconst dynamoConfig = {\n    credentials: creds,\n    region: process.env.AWS_REGION\n};\n\n/**\n * Performs operations for location-based advertisements interfacing primiarly with\n * Amazon DynamoDB table.\n *\n * @class advertisement\n */\nlet advertisement = (function() {\n\n  /**\n   * @class advertisement\n   * @constructor\n   */\n  let advertisement = function() {};\n\n  /**\n   * Retrieves points of interest from POI table.\n   * @param {JSON} payload - location message\n   * @param {getPoints~callback} cb - The callback that handles the response.\n   */\n  advertisement.prototype.getPoints = function(payload, cb) {\n      var params = {\n          TableName: poiTable\n      };\n\n      let docClient = new AWS.DynamoDB.DocumentClient(dynamoConfig);\n      docClient.scan(params, function(err, data) {\n          if (err) {\n              console.log(err);\n              return cb(err, null);\n          }\n          if (data) {\n              getGeolocationResults(data.Items, 0, payload, function(err, data) {\n                  if (err) {\n                      console.log(err);\n                      return cb(err, null);\n                  } else {\n                      return cb(null, \'completed geo eval\');\n                  }\n              });\n          }\n      });\n  };\n\n  /**\n   * Determines if the vehicle is near a point of interest.\n   * @param {array} items - points of interest\n   * @param {int} index - counter\n   * @param {JSON} record - location message\n   * @param {getGeolocationResults~callback} cb - The callback that handles the response.\n   */\n  let getGeolocationResults = function(items, index, record, cb) {\n      console.log(items)\n      if (index < items.length) {\n          console.log("processing: ", items[index]);\n          let poi_point = {latitude: items[index].latitude, longitude: items[index].longitude};\n          if(geolib.isPointWithinRadius(poi_point,{latitude: record.latitude, longitude: record.longitude},items[index].radius)){\n              console.log(\'point is in circle for \' + items[index].poi);\n              processAd(record, items[index], function(err, data) {\n                  if (err) {\n                      console.log("error processing ad");\n                      console.log(err);\n                      return cb(err, null);\n                  } else {\n                      index++;\n                      getGeolocationResults(items, index, record, cb);\n                  }\n              });\n          } else {\n              index++;\n              getGeolocationResults(items, index, record, cb);\n          }\n\n      } else {\n          return cb(null, "evals complete");\n      }\n  };\n\n  /**\n   * Process the nearby point of interest.\n   * @param {JSON} record - location message\n   * @param {JSON} poi - nearby point of interest\n   * @param {processAd~callback} cb - The callback that handles the response.\n   */\n  let processAd = function(record,poi,cb){\n      var params = {\n          TableName: marketingTable,\n          KeyConditionExpression: \'trip_id = :tripid and poi_id = :poiid\',\n          ExpressionAttributeValues: {\n                      \':tripid\': record.trip_id,\n                      \':poiid\': poi.poi_id\n                  }\n\n      };\n      let docClient = new AWS.DynamoDB.DocumentClient(dynamoConfig);\n      docClient.query(params, function(err, adata){\n          if (err) {\n              console.log(err);\n              return cb(err, null);\n              }\n          if(adata) {\n              console.log(adata);\n              let _exist = _.find(adata.Items, function(item) {\n                  return item.poi_id === poi.poi_id;\n              });\n              console.log(_exist);\n\n              if (!_exist){\n                      console.log(\'has not yet received this ad\');\n                      let _advertisement = {\n                          vin: record.vin,\n                          trip_id: record.trip_id,\n                          created_at: moment().utc().format(),\n                          updated_at: moment().utc().format(),\n                          identified_at: moment(record.timestamp).utc().format(),\n                          poi_id: poi.poi_id,\n                          message: poi.message,\n                          action: \'none\'\n                      };\n\n                      let params = {\n                          TableName: marketingTable,\n                          Item: _advertisement\n                      };\n\n                      let docClient = new AWS.DynamoDB.DocumentClient(dynamoConfig);\n                      docClient.put(params, function(err, data){\n                          if (err) {\n                              console.log(err);\n                              return cb(err, null);\n                          }\n                          if (data){\n\n                              console.log(data);\n                              let _adInfo = poi.message;\n\n                              let _mobile = [\n                                  \'*Notification from\',\n                                  poi.poi,\n                                  \'-\',\n                                  _adInfo\n                              ].join(\' \');\n\n                              let _hud = _adInfo;\n\n                              let _message = {\n                                  type: \'info\',\n                                  mobile: _mobile,\n                                  mqtt: _hud\n                              };\n\n                              sendNotification(record.vin, _message, function(err, msg_data){\n                                  if (err) {\n                                      console.log(err);\n                                      return cb(err, null);\n                                  }\n                                  console.log(msg_data);\n                                  return cb(null, _advertisement);\n                              });\n                          }\n                      });\n                  } else {\n                      console.log(\'already exists\');\n                      return cb(null, {});\n                  }\n          } else {\n              return cb({\n                  error: {\n                      message: \'Error occured querying anomaly table.\'\n                  }\n              }, null);\n          }\n      });\n  };\n\n  let sendNotification = function(vin, message, cb) {\n      let _payload = {\n          vin: vin,\n          message: message\n      };\n\n      let params = {\n          FunctionName: process.env.NOTIFICATION_SERVICE,\n          InvocationType: \'Event\',\n          LogType: \'None\',\n          Payload: JSON.stringify(_payload)\n      };\n      let lambda = new AWS.Lambda();\n      lambda.invoke(params, function(err, data) {\n          if (err) {\n              console.log(\'Error occured when triggering access logging service.\', err);\n          }\n\n          return cb(null, \'notification transmission triggered\');\n      });\n  };\n\n  return advertisement;\n\n})();\n\nmodule.exports = advertisement;\n', 'marketing.spec.js': "'use strict';\n\nlet assert = require('chai').assert;\nlet expect = require('chai').expect;\nlet path = require('path');\nlet AWS = require('aws-sdk-mock');\nAWS.setSDK(path.resolve('./node_modules/aws-sdk'));\n\nlet advertisement = require('./marketing.js');\n\ndescribe('advertisement', function() {\n\n    let payload = {\n        timestamp: '2017-12-19 18:10:46.836000000',\n        trip_id: '59a84da4-0c17-4f6c-9405-8187dc1af3e5',\n        vin: 'SAMPLEVIN123',\n        name: 'location',\n        latitude: '-12.34567',\n        longitude: '98.76543'\n    };\n\n    let poiRecord = {\n        city: 'Henderson',\n        poi_id: 'nv_rec_2',\n        radius: '500',\n        longitude: '-115.024756',\n        message: 'Closed for Winter. Save on 2018 season passes:',\n        address: '900 Galleria Dr, Henderson, NV 89011',\n        poi: 'Cowabunga Bay Las Vegas',\n        latitude: '36.072018',\n        state: 'NV'\n      };\n\n    describe('#getPoints', function() {\n\n        beforeEach(function() {});\n\n        afterEach(function() {\n            AWS.restore('DynamoDB.DocumentClient');\n        });\n\n        it('should return a list of POI records when ddb scan successful', function(done) {\n\n              AWS.mock('DynamoDB.DocumentClient', 'scan', function(params, callback) {\n                  callback(null, {\n                      Items: [poiRecord]\n                  });\n              });\n\n              let _ad = new advertisement();\n              _ad.getPoints(payload, function(err, data) {\n                  if (err) done(err);\n                  else{\n                      expect(data).to.equal('completed geo eval');\n                      done();\n                  }\n              });\n        });\n\n        it('should return an error when ddb scan not successful', function(done) {\n\n              AWS.mock('DynamoDB.DocumentClient', 'scan', function(params, callback) {\n                  callback('error',null);\n              });\n\n              let _ad = new advertisement();\n              _ad.getPoints(payload, function(err, data) {\n                  if (err) {\n                      expect(err).to.equal('error');\n                      done();\n                  } else{\n                      done();\n                  }\n              });\n        });\n    });\n});\n", 'notification.js': '/*********************************************************************************************************************\n *  Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *\n *                                                                                                                    *\n *  Licensed under the Amazon Software License (the "License"). You may not use this file except in compliance        *\n *  with the License. A copy of the License is located at                                                             *\n *                                                                                                                    *\n *      http://aws.amazon.com/asl/                                                                                    *\n *                                                                                                                    *\n *  or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES *\n *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions    *\n *  and limitations under the License.                                                                                *\n *********************************************************************************************************************/\n\n/**\n * @author Solution Builders\n */\n\n\'use strict\';\n\nlet shortid = require(\'shortid\');\nlet moment = require(\'moment\');\nlet _ = require(\'underscore\');\nlet AWS = require(\'aws-sdk\');\n\nlet creds = new AWS.EnvironmentCredentials(\'AWS\'); // Lambda provided credentials\nconst dynamoConfig = {\n    credentials: creds,\n    region: process.env.AWS_REGION\n};\nconst ddbTable = process.env.VEHICLE_OWNER_TBL;\nconst poolId = process.env.USER_POOL_ID;\n\n/**\n * Performs operations for notification actions interfacing primiarly with\n * Amazon DynamoDB table, cognito and SNS.\n *\n * @class notification\n */\nlet notification = (function() {\n\n    /**\n     * @class notification\n     * @constructor\n     */\n    let notification = function() {};\n\n    /**\n     * Send message to mobile device via SNS.\n     * @param {payload} payload - message data payload\n     * @param {sendNotification~callback} cb - The callback that handles the response.\n     */\n    notification.prototype.sendNotification = function(payload, cb) {\n\n        getVehicleOwner(payload.vin, function(err, data) {\n            if (err) {\n                console.log(err);\n                return cb(err, null);\n            }\n\n            if (data.Items.length > 0) {\n                getUser(data.Items[0].owner_id, function(err, user) {\n                    if (err) {\n                        console.log(err);\n                        return cb(err, null);\n                    }\n\n                    let params = {\n                        Message: payload.message.mobile,\n                        PhoneNumber: user.phone\n                    };\n\n                    let sns = new AWS.SNS();\n                    sns.publish(params, function(err, msg_data) {\n                        if (err) {\n                            console.log(err);\n                            return cb(err, null);\n                        }\n\n                        console.log(msg_data);\n                        return cb(null, {\n                            result: \'Owner notification sent\'\n                        });\n                    });\n                });\n            } else {\n                return cb(null, {\n                    error: {\n                        message: \'VIN does not have an associated onwer.\'\n                    }\n                });\n            }\n        });\n\n    };\n\n    /**\n     * Send notification message via MQTT.\n     * @param {payload} payload - message data payload\n     * @param {sendNotiviationViaMqtt~callback} cb - The callback that handles the response.\n     */\n    notification.prototype.sendNotiviationViaMqtt = function(payload, cb) {\n        let _topic = [\'connectedcar/alert\', payload.vin, payload.type].join(\'/\')\n\n        var params = {\n            topic: _topic,\n            payload: JSON.stringify({\n                timestamp: moment.utc().format(\'YYYY-MM-DD HH:mm:ss.SSSSSSSSS\'),\n                type: payload.message.type,\n                message: payload.message.mqtt\n            }),\n            qos: 0\n        };\n\n        var iot = new AWS.Iot();\n\n        iot.describeEndpoint({}, (err, data) => {\n            if (err) {\n                console.log(err);\n                return cb(err, null);\n            }\n\n            var iotdata = new AWS.IotData({\n                endpoint: data.endpointAddress\n            });\n\n            iotdata.publish(params, function(err, msg_data) {\n                if (err) {\n                    console.log(err);\n                    return cb(err, null);\n                }\n\n                return cb(null, {\n                    result: \'Owner notification sent\'\n                });\n            });\n        });\n    };\n\n    /**\n     * Get the owner id for a vehicle.\n     * @param {string} vin - vehicle identification number\n     * @param {getVehicleOwner~callback} cb - The callback that handles the response.\n     */\n    let getVehicleOwner = function(vin, cb) {\n\n        var params = {\n            TableName: ddbTable,\n            IndexName: \'vin-index\',\n            KeyConditionExpression: \'vin = :vin\',\n            ExpressionAttributeValues: {\n                \':vin\': vin\n            }\n        };\n\n        let docClient = new AWS.DynamoDB.DocumentClient(dynamoConfig);\n        docClient.query(params, function(err, data) {\n            if (err) {\n                console.log(err);\n                return cb(err, null);\n            }\n\n            return cb(null, data);\n        });\n\n    };\n\n    /**\n     * Retrieves a user account from the Amazon Cognito user pool.\n     * @param {integer} userId - Username of account to retrieve from the user pool.\n     * @param {getUser~requestCallback} cb - The callback that handles the response.\n     */\n    let getUser = function(userId, cb) {\n\n        let params = {\n            UserPoolId: poolId,\n            Username: userId\n        };\n\n        let cognitoidentityserviceprovider = new AWS.CognitoIdentityServiceProvider();\n        cognitoidentityserviceprovider.adminGetUser(params, function(err, data) {\n            if (err) {\n                console.log(err);\n                return cb(err.message, null);\n            }\n\n            let _user = {\n                user_id: data.Username,\n                phone: \'\',\n                email: \'\',\n                enabled: data.Enabled,\n                created_at: data.UserCreateDate,\n                updated_at: data.UserLastModifiedDate\n            };\n\n            let _em = _.where(data.UserAttributes, {\n                Name: \'email\'\n            });\n            if (_em.length > 0) {\n                _user.email = _em[0].Value;\n            }\n\n            let _phone = _.where(data.UserAttributes, {\n                Name: \'phone_number\'\n            });\n            if (_phone.length > 0) {\n                _user.phone = _phone[0].Value;\n            }\n\n            return cb(null, _user);\n\n        });\n\n    };\n\n    return notification;\n\n})();\n\nmodule.exports = notification;\n', 'notification.spec.js': "'use strict';\n\nlet assert = require('chai').assert;\nlet expect = require('chai').expect;\nlet path = require('path');\nlet AWS = require('aws-sdk-mock');\nAWS.setSDK(path.resolve('./node_modules/aws-sdk'));\n\nlet Notification = require('./notification.js');\n\ndescribe('notification', function() {\n\n    describe('#sendNotification', function() {\n\n        let payload = {\n            vin: 'SAMPLEVIN123',\n            message: {\n                type: 'test',\n                mobile: 'mobile test message',\n                mqtt: 'mqtt test message'\n            }\n        };\n\n        let _test_vehicle = {\n            owner_id: 'user_test_com',\n            vin: 'SAMPLEVIN123',\n            nickname: 'Test Vehicle',\n            odometer: 123\n        };\n\n        let _user = {\n            Username: 'Test User',\n            Enabled: true,\n            UserCreateDate: '2017-03-11T14:55:22Z',\n            UserLastModifiedDate: '2017-03-11T14:55:22Z',\n            UserAttributes: [{\n                Name: 'email',\n                Value: 'user@test.com'\n            }, {\n                Name: 'phone_number',\n                Value: '111-111-1111'\n            }]\n        };\n\n        beforeEach(function() {});\n\n        afterEach(function() {\n            AWS.restore('DynamoDB.DocumentClient');\n            AWS.restore('CognitoIdentityServiceProvider');\n            AWS.restore('SNS');\n        });\n\n        it('should return success when notification is successful sent', function(done) {\n\n            AWS.mock('DynamoDB.DocumentClient', 'query', function(params, callback) {\n                callback(null, {\n                    Items: [_test_vehicle]\n                });\n            });\n\n            AWS.mock('CognitoIdentityServiceProvider', 'adminGetUser', function(params, callback) {\n                callback(null, _user);\n            });\n\n            AWS.mock('SNS', 'publish', function(params, callback) {\n                callback(null, {\n                    result: 'success'\n                });\n            });\n\n            let _notification = new Notification();\n            _notification.sendNotification(payload, function(err, data) {\n                if (err) done(err);\n                else {\n                    assert.equal(data.result, 'Owner notification sent');\n                    done();\n                }\n            });\n        });\n\n        it('should return error information when ddb query fails', function(done) {\n\n            AWS.mock('DynamoDB.DocumentClient', 'query', function(params, callback) {\n                callback('ddb error', null);\n            });\n\n            AWS.mock('CognitoIdentityServiceProvider', 'adminGetUser', function(params, callback) {\n                callback(null, _user);\n            });\n\n            AWS.mock('SNS', 'publish', function(params, callback) {\n                callback(null, {\n                    result: 'success'\n                });\n            });\n\n            let _notification = new Notification();\n            _notification.sendNotification(payload, function(err, data) {\n                if (err) {\n                    expect(err).to.equal('ddb error');\n                    done();\n                } else {\n                    done('invalid failure for negative test');\n                }\n            });\n\n        });\n\n        it('should return error information when cognito lookup fails', function(done) {\n\n            AWS.mock('DynamoDB.DocumentClient', 'query', function(params, callback) {\n                callback(null, {\n                    Items: [_test_vehicle]\n                });\n            });\n\n            AWS.mock('CognitoIdentityServiceProvider', 'adminGetUser', function(params, callback) {\n                callback({\n                    message: 'cognito error'\n                }, null);\n            });\n\n            AWS.mock('SNS', 'publish', function(params, callback) {\n                callback(null, {\n                    result: 'success'\n                });\n            });\n\n            let _notification = new Notification();\n            _notification.sendNotification(payload, function(err, data) {\n                if (err) {\n                    expect(err).to.equal('cognito error');\n                    done();\n                } else {\n                    done('invalid failure for negative test');\n                }\n            });\n\n        });\n\n        it('should return error information when sns send fails', function(done) {\n\n            AWS.mock('DynamoDB.DocumentClient', 'query', function(params, callback) {\n                callback(null, {\n                    Items: [_test_vehicle]\n                });\n            });\n\n            AWS.mock('CognitoIdentityServiceProvider', 'adminGetUser', function(params, callback) {\n                callback(null, _user);\n            });\n\n            AWS.mock('SNS', 'publish', function(params, callback) {\n                callback('sns error', null);\n            });\n\n            let _notification = new Notification();\n            _notification.sendNotification(payload, function(err, data) {\n                if (err) {\n                    expect(err).to.equal('sns error');\n                    done();\n                } else {\n                    done('invalid failure for negative test');\n                }\n            });\n\n        });\n\n    });\n\n    describe('#sendNotiviationViaMqtt', function() {\n\n        let payload = {\n            vin: 'SAMPLEVIN123',\n            message: {\n                type: 'test',\n                mobile: 'mobile test message',\n                mqtt: 'mqtt test message'\n            }\n        };\n\n        beforeEach(function() {});\n\n        afterEach(function() {\n            AWS.restore('Iot');\n            AWS.restore('IotData');\n        });\n\n        it('should return success when notification is successful sent', function(done) {\n\n            AWS.mock('Iot', 'describeEndpoint', function(params, callback) {\n                callback(null, {\n                    endpointAddress: 'sample.iot.region.amazonaws.com'\n                });\n            });\n\n            AWS.mock('IotData', 'publish', function(params, callback) {\n                callback(null, {\n                    result: 'success'\n                });\n            });\n\n            let _notification = new Notification();\n            _notification.sendNotiviationViaMqtt(payload, function(err, data) {\n                if (err) done(err);\n                else {\n                    assert.equal(data.result, 'Owner notification sent');\n                    done();\n                }\n            });\n        });\n\n        it('should return error information when publish fails', function(done) {\n\n            AWS.mock('Iot', 'describeEndpoint', function(params, callback) {\n                callback(null, {\n                    endpointAddress: 'sample.iot.region.amazonaws.com'\n                });\n            });\n\n            AWS.mock('IotData', 'publish', function(params, callback) {\n                callback({\n                    message: 'iotdata error'\n                }, null);\n            });\n\n            let _notification = new Notification();\n            _notification.sendNotiviationViaMqtt(payload, function(err,\n                data) {\n                if (err) {\n                    expect(err.message).to.equal('iotdata error');\n                    done();\n                } else {\n                    done('invalid failure for negative test');\n                }\n            });\n\n        });\n\n    });\n\n});\n", 'healthreport.js': '/*********************************************************************************************************************\n *  Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *\n *                                                                                                                    *\n *  Licensed under the Amazon Software License (the "License"). You may not use this file except in compliance        *\n *  with the License. A copy of the License is located at                                                             *\n *                                                                                                                    *\n *      http://aws.amazon.com/asl/                                                                                    *\n *                                                                                                                    *\n *  or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES *\n *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions    *\n *  and limitations under the License.                                                                                *\n *********************************************************************************************************************/\n\n/**\n * @author Solution Builders\n */\n\n\'use strict\';\n\nlet shortid = require(\'shortid\');\nlet moment = require(\'moment\');\nlet _ = require(\'underscore\');\nlet AWS = require(\'aws-sdk\');\n\nlet creds = new AWS.EnvironmentCredentials(\'AWS\'); // Lambda provided credentials\nconst dynamoConfig = {\n    credentials: creds,\n    region: process.env.AWS_REGION\n};\nconst ddbTable = process.env.HEALTH_REPORT_TBL;\nconst ownerTable = process.env.VEHICLE_OWNER_TBL;\n\n/**\n * Performs operations for health report management actions interfacing primiarly with\n * Amazon DynamoDB table.\n *\n * @class healthreport\n */\nlet healthreport = (function() {\n\n    /**\n     * @class healthreport\n     * @constructor\n     */\n    let healthreport = function() {};\n\n    /**\n     * Retrieves the health report records for a user\'s vehicles.\n     * @param {JSON} ticket - authentication ticket\n     * @param {string} vin - vehicle identification number\n     * @param {listVehicles~callback} cb - The callback that handles the response.\n     */\n    healthreport.prototype.listHealthReportsByVehicle = function(ticket, vin, cb) {\n\n        // verify user owns vehicle\n        let params = {\n            TableName: ownerTable,\n            Key: {\n                owner_id: ticket[\'cognito:username\'],\n                vin: vin\n            }\n        };\n\n        let docClient = new AWS.DynamoDB.DocumentClient(dynamoConfig);\n        docClient.get(params, function(err, data) {\n            if (err) {\n                console.log(err);\n                return cb(err, null);\n            }\n\n            if (!_.isEmpty(data)) {\n                var hr_params = {\n                    TableName: ddbTable,\n                    KeyConditionExpression: \'vin = :vin\',\n                    ExpressionAttributeValues: {\n                        \':vin\': vin\n                    }\n                };\n\n                let docClient = new AWS.DynamoDB.DocumentClient(dynamoConfig);\n                docClient.query(hr_params, function(err, hr_data) {\n                    if (err) {\n                        console.log(err);\n                        return cb(err, null);\n                    }\n\n                    return cb(null, hr_data);\n                });\n            } else {\n                return cb({\n                    error: {\n                        message: \'The vehicle requested is not registered under the user.\'\n                    }\n                }, null);\n            }\n        });\n\n    };\n\n    /**\n     * Retrieves a specific health report record for a user\'s registered vehicle.\n     * @param {JSON} ticket - authentication ticket\n     * @param {string} vin - vehicle identification number\n     * @param {string} reportId - Health report record id\n     * @param {getVehicle~callback} cb - The callback that handles the response.\n     */\n    healthreport.prototype.getVehicleHealthReport = function(ticket, vin, reportId, cb) {\n\n        // verify user owns vehicle\n        let params = {\n            TableName: ownerTable,\n            Key: {\n                owner_id: ticket[\'cognito:username\'],\n                vin: vin\n            }\n        };\n\n        let docClient = new AWS.DynamoDB.DocumentClient(dynamoConfig);\n        docClient.get(params, function(err, data) {\n            if (err) {\n                console.log(err);\n                return cb(err, null);\n            }\n\n            if (!_.isEmpty(data)) {\n                let hr_params = {\n                    TableName: ddbTable,\n                    Key: {\n                        vin: vin,\n                        report_id: reportId\n                    }\n                };\n\n                let docClient = new AWS.DynamoDB.DocumentClient(dynamoConfig);\n                docClient.get(hr_params, function(err, hr_data) {\n                    if (err) {\n                        console.log(err);\n                        return cb(err, null);\n                    }\n\n                    if (!_.isEmpty(hr_data)) {\n                        return cb(null, hr_data.Item);\n                    } else {\n                        return cb({\n                            error: {\n                                message: \'The health report record requested does not exist.\'\n                            }\n                        }, null);\n                    }\n                });\n            } else {\n                return cb({\n                    error: {\n                        message: \'The vehicle requested is not registered under the user.\'\n                    }\n                }, null);\n            }\n        });\n\n    };\n\n    return healthreport;\n\n})();\n\nmodule.exports = healthreport;\n', 'healthreport.spec.js': "'use strict';\n\nlet assert = require('chai').assert;\nlet expect = require('chai').expect;\nlet path = require('path');\nlet AWS = require('aws-sdk-mock');\nAWS.setSDK(path.resolve('./node_modules/aws-sdk'));\n\nlet HealthReport = require('./healthreport.js');\n\ndescribe('healthreport', function() {\n\n    describe('#listHealthReportsByVehicle', function() {\n\n        let _test_vehicle = {\n            owner: 'user_test_com',\n            vin: 'SAMPLEVIN123',\n            nickname: 'Test Vehicle',\n            odometer: 123\n        };\n\n        let _test_report = {\n            report_id: '07dd5551-9e27-4fd5-813d-f5e009d773d0',\n            vin: 'SAMPLEVIN123',\n            owner_id: 'user_test_com'\n        };\n\n        let _ticket = {\n            'cognito:username': 'user_test_com'\n        };\n\n        beforeEach(function() {});\n\n        afterEach(function() {\n            AWS.restore('DynamoDB.DocumentClient');\n        });\n\n        it('should return list of health report records when ddb query is successful', function(done) {\n\n            AWS.mock('DynamoDB.DocumentClient', 'get', function(params, callback) {\n                callback(null, {\n                    Item: _test_vehicle\n                });\n            });\n\n            AWS.mock('DynamoDB.DocumentClient', 'query', function(params, callback) {\n                callback(null, {\n                    Items: [_test_report]\n                });\n            });\n\n            let _hr = new HealthReport();\n            _hr.listHealthReportsByVehicle(_ticket, _test_vehicle.vin, function(err, data) {\n                if (err) done(err);\n                else {\n                    assert.equal(data.Items.length, 1);\n                    done();\n                }\n            });\n        });\n\n        it('should return error information when ddb query fails', function(done) {\n\n            AWS.mock('DynamoDB.DocumentClient', 'get', function(params, callback) {\n                callback(null, {\n                    Item: _test_vehicle\n                });\n            });\n\n            AWS.mock('DynamoDB.DocumentClient', 'query', function(params, callback) {\n                callback('error', null);\n            });\n\n            let _hr = new HealthReport();\n            _hr.listHealthReportsByVehicle(_ticket, _test_vehicle.vin, function(err, data) {\n                if (err) {\n                    expect(err).to.equal('error');\n                    done();\n                } else {\n                    done('invalid failure for negative test');\n                }\n            });\n\n        });\n    });\n\n    describe('#getVehicleHealthReport', function() {\n\n        let _test_vehicle = {\n            owner: 'user_test_com',\n            vin: 'SAMPLEVIN123',\n            nickname: 'Test Vehicle',\n            odometer: 123\n        };\n\n        let _test_report = {\n            report_id: '07dd5551-9e27-4fd5-813d-f5e009d773d0',\n            vin: 'SAMPLEVIN123',\n            owner_id: 'user_test_com'\n        };\n\n        let _ticket = {\n            'cognito:username': 'user_test_com'\n        };\n\n        beforeEach(function() {});\n\n        afterEach(function() {\n            AWS.restore('DynamoDB.DocumentClient');\n        });\n\n        it('should return a health report when ddb get is successful', function(done) {\n\n            AWS.mock('DynamoDB.DocumentClient', 'get', function(params, callback) {\n                if (params.TableName === 'tblowner') {\n                    callback(null, {\n                        Item: _test_vehicle\n                    });\n                } else {\n                    callback(null, {\n                        Item: _test_report\n                    });\n                }\n            });\n\n            let _hr = new HealthReport();\n            _hr.getVehicleHealthReport(_ticket, _test_vehicle.vin, _test_report.report_id,\n                function(err, data) {\n                    if (err) done(err);\n                    else {\n                        assert.equal(data, _test_report);\n                        done();\n                    }\n                });\n        });\n\n        it('should return error information when ddb get fails', function(done) {\n\n            AWS.mock('DynamoDB.DocumentClient', 'get', function(params, callback) {\n                if (params.TableName === 'tblowner') {\n                    callback(null, {\n                        Item: _test_vehicle\n                    });\n                } else {\n                    callback('error', null);\n                }\n            });\n\n            let _hr = new HealthReport();\n            _hr.getVehicleHealthReport(_ticket, _test_vehicle.vin, _test_report.report_id,\n                function(err, data) {\n                    if (err) {\n                        expect(err).to.equal('error');\n                        done();\n                    } else {\n                        done('invalid failure for negative test');\n                    }\n                });\n        });\n    });\n\n});\n", 'trip.js': '/*********************************************************************************************************************\n *  Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *\n *                                                                                                                    *\n *  Licensed under the Amazon Software License (the "License"). You may not use this file except in compliance        *\n *  with the License. A copy of the License is located at                                                             *\n *                                                                                                                    *\n *      http://aws.amazon.com/asl/                                                                                    *\n *                                                                                                                    *\n *  or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES *\n *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions    *\n *  and limitations under the License.                                                                                *\n *********************************************************************************************************************/\n\n/**\n * @author Solution Builders\n */\n\n\'use strict\';\n\nlet shortid = require(\'shortid\');\nlet moment = require(\'moment\');\nlet _ = require(\'underscore\');\nlet AWS = require(\'aws-sdk\');\n\nlet creds = new AWS.EnvironmentCredentials(\'AWS\'); // Lambda provided credentials\nconst dynamoConfig = {\n    credentials: creds,\n    region: process.env.AWS_REGION\n};\nconst ddbTable = process.env.VEHICLE_TRIP_TBL;\nconst ownerTable = process.env.VEHICLE_OWNER_TBL;\n\n/**\n * Performs operations for trip management actions interfacing primiarly with\n * Amazon DynamoDB table.\n *\n * @class trip\n */\nlet trip = (function() {\n\n    /**\n     * @class trip\n     * @constructor\n     */\n    let trip = function() {};\n\n    /**\n     * Retrieves the trip records for a user\'s vehicles.\n     * @param {JSON} ticket - authentication ticket\n     * @param {string} vin - vehicle identification number\n     * @param {listVehicles~callback} cb - The callback that handles the response.\n     */\n    trip.prototype.listTripsByVehicle = function(ticket, vin, cb) {\n\n        // verify user owns vehicle\n        let params = {\n            TableName: ownerTable,\n            Key: {\n                owner_id: ticket[\'cognito:username\'],\n                vin: vin\n            }\n        };\n\n        let docClient = new AWS.DynamoDB.DocumentClient(dynamoConfig);\n        docClient.get(params, function(err, data) {\n            if (err) {\n                console.log(err);\n                return cb(err, null);\n            }\n\n            if (!_.isEmpty(data)) {\n                var trip_params = {\n                    TableName: ddbTable,\n                    KeyConditionExpression: \'vin = :vin\',\n                    ExpressionAttributeValues: {\n                        \':vin\': vin\n                    }\n                };\n\n                let docClient = new AWS.DynamoDB.DocumentClient(dynamoConfig);\n                docClient.query(trip_params, function(err, trip_data) {\n                    if (err) {\n                        console.log(err);\n                        return cb(err, null);\n                    }\n\n                    return cb(null, trip_data);\n                });\n            } else {\n                return cb({\n                    error: {\n                        message: \'The vehicle requested is not registered under the user.\'\n                    }\n                }, null);\n            }\n        });\n\n    };\n\n    /**\n     * Retrieves a specific trip record for a user\'s registered vehicle.\n     * @param {JSON} ticket - authentication ticket\n     * @param {string} vin - vehicle identification number\n     * @param {string} tripId - Trip record id\n     * @param {getVehicle~callback} cb - The callback that handles the response.\n     */\n    trip.prototype.getVehicleTrip = function(ticket, vin, tripId, cb) {\n\n        // verify user owns vehicle\n        let params = {\n            TableName: ownerTable,\n            Key: {\n                owner_id: ticket[\'cognito:username\'],\n                vin: vin\n            }\n        };\n\n        let docClient = new AWS.DynamoDB.DocumentClient(dynamoConfig);\n        docClient.get(params, function(err, data) {\n            if (err) {\n                console.log(err);\n                return cb(err, null);\n            }\n\n            if (!_.isEmpty(data)) {\n                let trip_params = {\n                    TableName: ddbTable,\n                    Key: {\n                        vin: vin,\n                        trip_id: tripId\n                    }\n                };\n\n                let docClient = new AWS.DynamoDB.DocumentClient(dynamoConfig);\n                docClient.get(trip_params, function(err, trip_data) {\n                    if (err) {\n                        console.log(err);\n                        return cb(err, null);\n                    }\n\n                    if (!_.isEmpty(trip_data)) {\n                        return cb(null, trip_data.Item);\n                    } else {\n                        return cb({\n                            error: {\n                                message: \'The trip record requested does not exist.\'\n                            }\n                        }, null);\n                    }\n                });\n            } else {\n                return cb({\n                    error: {\n                        message: \'The vehicle requested is not registered under the user.\'\n                    }\n                }, null);\n            }\n        });\n\n    };\n\n    return trip;\n\n})();\n\nmodule.exports = trip;\n', 'trip.spec.js': "'use strict';\n\nlet assert = require('chai').assert;\nlet expect = require('chai').expect;\nlet path = require('path');\nlet AWS = require('aws-sdk-mock');\nAWS.setSDK(path.resolve('./node_modules/aws-sdk'));\n\nlet Trip = require('./trip.js');\n\ndescribe('vehicle', function() {\n\n    describe('#listDtcByVehicle', function() {\n\n        let _test_vehicle = {\n            owner: 'user_test_com',\n            vin: 'SAMPLEVIN123',\n            nickname: 'Test Vehicle',\n            odometer: 123\n        };\n\n        let _test_trip = {\n            trip_id: '07dd5551-9e27-4fd5-813d-f5e009d773d0',\n            vin: 'SAMPLEVIN123'\n        };\n\n        let _ticket = {\n            'cognito:username': 'user_test_com'\n        };\n\n        beforeEach(function() {});\n\n        afterEach(function() {\n            AWS.restore('DynamoDB.DocumentClient');\n        });\n\n        it('should return list of trip records when ddb query is successful', function(done) {\n\n            AWS.mock('DynamoDB.DocumentClient', 'get', function(params, callback) {\n                callback(null, {\n                    Item: _test_vehicle\n                });\n            });\n\n            AWS.mock('DynamoDB.DocumentClient', 'query', function(params, callback) {\n                callback(null, {\n                    Items: [_test_trip]\n                });\n            });\n\n            let _trip = new Trip();\n            _trip.listTripsByVehicle(_ticket, _test_vehicle.vin, function(err, data) {\n                if (err) done(err);\n                else {\n                    assert.equal(data.Items.length, 1);\n                    done();\n                }\n            });\n        });\n\n        it('should return error information when ddb query fails', function(done) {\n\n            AWS.mock('DynamoDB.DocumentClient', 'get', function(params, callback) {\n                callback(null, {\n                    Item: _test_vehicle\n                });\n            });\n\n            AWS.mock('DynamoDB.DocumentClient', 'query', function(params, callback) {\n                callback('error', null);\n            });\n\n            let _trip = new Trip();\n            _trip.listTripsByVehicle(_ticket, _test_vehicle.vin, function(err, data) {\n                if (err) {\n                    expect(err).to.equal('error');\n                    done();\n                } else {\n                    done('invalid failure for negative test');\n                }\n            });\n\n        });\n    });\n\n    // describe('#getVehicleDtc', function() {\n    //\n    //     let _test_vehicle = {\n    //         owner: 'user_test_com',\n    //         vin: 'SAMPLEVIN123',\n    //         nickname: 'Test Vehicle',\n    //         odometer: 123\n    //     };\n    //\n    //     let _test_dtc = {\n    //         acknowledged: false,\n    //         created_at: '2017-04-27T14:49:36Z',\n    //         udpated_at: '2017-04-27T14:49:36Z',\n    //         generated: '2017-04-27T14:49:34Z',\n    //         description: 'No description available.',\n    //         description: 'No description available.',\n    //         dtc: 'P0485',\n    //         dtc_id: 'TEST123',\n    //         vin: 'SAMPLEVIN123',\n    //         steps: []\n    //     };\n    //\n    //     let _ticket = {\n    //         'cognito:username': 'user_test_com'\n    //     };\n    //\n    //     beforeEach(function() {});\n    //\n    //     afterEach(function() {\n    //         AWS.restore('DynamoDB.DocumentClient');\n    //     });\n    //\n    //     it('should return a vehicle when ddb get is successful', function(done) {\n    //\n    //         AWS.mock('DynamoDB.DocumentClient', 'get', function(params, callback) {\n    //             callback(null, {\n    //                 Item: _test_vehicle\n    //             });\n    //         });\n    //\n    //         AWS.mock('DynamoDB.DocumentClient', 'get', function(params, callback) {\n    //             callback(null, {\n    //                 Item: _test_vehicle\n    //             });\n    //         });\n    //\n    //         let _vehicle = new Vehicle();\n    //         _vehicle.getVehicle(_ticket, _test_vehicle.vin, function(err, data) {\n    //             if (err) done(err);\n    //             else {\n    //                 assert.equal(data, _test_vehicle);\n    //                 done();\n    //             }\n    //         });\n    //     });\n    //\n    //     it('should return error information when ddb get fails', function(done) {\n    //\n    //         AWS.mock('DynamoDB.DocumentClient', 'get', function(params, callback) {\n    //             callback('error', null);\n    //         });\n    //\n    //         let _vehicle = new Vehicle();\n    //         _vehicle.getVehicle(_ticket, _test_vehicle.vin, function(err, data) {\n    //             if (err) {\n    //                 expect(err).to.equal('error');\n    //                 done();\n    //             } else {\n    //                 done('invalid failure for negative test');\n    //             }\n    //         });\n    //\n    //     });\n    // });\n\n});\n", 'vehicle.js': '/*********************************************************************************************************************\n *  Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *\n *                                                                                                                    *\n *  Licensed under the Amazon Software License (the "License"). You may not use this file except in compliance        *\n *  with the License. A copy of the License is located at                                                             *\n *                                                                                                                    *\n *      http://aws.amazon.com/asl/                                                                                    *\n *                                                                                                                    *\n *  or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES *\n *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions    *\n *  and limitations under the License.                                                                                *\n *********************************************************************************************************************/\n\n/**\n * @author Solution Builders\n */\n\n\'use strict\';\n\nlet shortid = require(\'shortid\');\nlet moment = require(\'moment\');\nlet _ = require(\'underscore\');\nlet AWS = require(\'aws-sdk\');\n\nlet creds = new AWS.EnvironmentCredentials(\'AWS\'); // Lambda provided credentials\nconst dynamoConfig = {\n    credentials: creds,\n    region: process.env.AWS_REGION\n};\nconst ddbTable = process.env.VEHICLE_OWNER_TBL;\n\n/**\n * Performs operations for vehicle management actions interfacing primiarly with\n * Amazon DynamoDB table.\n *\n * @class vehicle\n */\nlet vehicle = (function() {\n\n    /**\n     * @class vehicle\n     * @constructor\n     */\n    let vehicle = function() {};\n\n    /**\n     * Retrieves a user\'s vehicles.\n     * @param {JSON} ticket - authentication ticket\n     * @param {listVehicles~callback} cb - The callback that handles the response.\n     */\n    vehicle.prototype.listVehicles = function(ticket, cb) {\n        var params = {\n            TableName: ddbTable,\n            KeyConditionExpression: \'owner_id = :uid\',\n            ExpressionAttributeValues: {\n                \':uid\': ticket[\'cognito:username\']\n            }\n        };\n\n        let docClient = new AWS.DynamoDB.DocumentClient(dynamoConfig);\n        docClient.query(params, function(err, data) {\n            if (err) {\n                console.log(err);\n                return cb(err, null);\n            }\n\n            return cb(null, data);\n        });\n\n    };\n\n    /**\n     * Registers a vehicle to and owner.\n     * @param {JSON} ticket - authentication ticket\n     * @param {JSON} vehicle - vehicle object\n     * @param {createVehicle~callback} cb - The callback that handles the response.\n     */\n    vehicle.prototype.createVehicle = function(ticket, vehicle, cb) {\n\n        vehicle.owner_id = ticket[\'cognito:username\'];\n\n        let params = {\n            TableName: ddbTable,\n            Item: vehicle\n        };\n\n        let docClient = new AWS.DynamoDB.DocumentClient(dynamoConfig);\n        docClient.put(params, function(err, data) {\n            if (err) {\n                console.log(err);\n                return cb(err, null);\n            }\n\n            return cb(null, vehicle);\n        });\n\n    };\n\n    /**\n     * Retrieves a user\'s registered vehicle.\n     * @param {JSON} ticket - authentication ticket\n     * @param {string} vin - vehicle identification number\n     * @param {getVehicle~callback} cb - The callback that handles the response.\n     */\n    vehicle.prototype.getVehicle = function(ticket, vin, cb) {\n\n        let params = {\n            TableName: ddbTable,\n            Key: {\n                owner_id: ticket[\'cognito:username\'],\n                vin: vin\n            }\n        };\n\n        let docClient = new AWS.DynamoDB.DocumentClient(dynamoConfig);\n        docClient.get(params, function(err, data) {\n            if (err) {\n                console.log(err);\n                return cb(err, null);\n            }\n\n            if (!_.isEmpty(data)) {\n                return cb(null, data.Item);\n            } else {\n                return cb({\n                    error: {\n                        message: \'The vehicle requested does not exist.\'\n                    }\n                }, null);\n            }\n        });\n\n    };\n\n    return vehicle;\n\n})();\n\nmodule.exports = vehicle;\n', 'vehicle.spec.js': "'use strict';\n\nlet assert = require('chai').assert;\nlet expect = require('chai').expect;\nlet path = require('path');\nlet AWS = require('aws-sdk-mock');\nAWS.setSDK(path.resolve('./node_modules/aws-sdk'));\n\nlet Vehicle = require('./vehicle.js');\n\ndescribe('vehicle', function() {\n\n    describe('#listVehicles', function() {\n\n        let _test_vehicle = {\n            owner: 'user_test_com',\n            vin: 'SAMPLEVIN123',\n            nickname: 'Test Vehicle',\n            odometer: 123\n        };\n\n        let _ticket = {\n            'cognito:username': 'user_test_com'\n        };\n\n        beforeEach(function() {});\n\n        afterEach(function() {\n            AWS.restore('DynamoDB.DocumentClient');\n        });\n\n        it('should return list of vehicles when ddb query is successful', function(done) {\n\n            AWS.mock('DynamoDB.DocumentClient', 'query', function(params, callback) {\n                callback(null, {\n                    Items: [_test_vehicle]\n                });\n            });\n\n            let _vehicle = new Vehicle();\n            _vehicle.listVehicles(_ticket, function(err, data) {\n                if (err) done(err);\n                else {\n                    assert.equal(data.Items.length, 1);\n                    done();\n                }\n            });\n        });\n\n        it('should return error information when ddb query fails', function(done) {\n\n            AWS.mock('DynamoDB.DocumentClient', 'query', function(params, callback) {\n                callback('error', null);\n            });\n\n            let _vehicle = new Vehicle();\n            _vehicle.listVehicles(_ticket, function(err, data) {\n                if (err) {\n                    expect(err).to.equal('error');\n                    done();\n                } else {\n                    done('invalid failure for negative test');\n                }\n            });\n\n        });\n    });\n\n    describe('#getVehicle', function() {\n\n        let _test_vehicle = {\n            owner: 'user_test_com',\n            vin: 'SAMPLEVIN123',\n            nickname: 'Test Vehicle',\n            odometer: 123\n        };\n\n        let _ticket = {\n            'cognito:username': 'user_test_com'\n        };\n\n        beforeEach(function() {});\n\n        afterEach(function() {\n            AWS.restore('DynamoDB.DocumentClient');\n        });\n\n        it('should return a vehicle when ddb get is successful', function(done) {\n\n            AWS.mock('DynamoDB.DocumentClient', 'get', function(params, callback) {\n                callback(null, {\n                    Item: _test_vehicle\n                });\n            });\n\n            let _vehicle = new Vehicle();\n            _vehicle.getVehicle(_ticket, _test_vehicle.vin, function(err, data) {\n                if (err) done(err);\n                else {\n                    assert.equal(data, _test_vehicle);\n                    done();\n                }\n            });\n        });\n\n        it('should return error information when ddb get fails', function(done) {\n\n            AWS.mock('DynamoDB.DocumentClient', 'get', function(params, callback) {\n                callback('error', null);\n            });\n\n            let _vehicle = new Vehicle();\n            _vehicle.getVehicle(_ticket, _test_vehicle.vin, function(err, data) {\n                if (err) {\n                    expect(err).to.equal('error');\n                    done();\n                } else {\n                    done('invalid failure for negative test');\n                }\n            });\n\n        });\n    });\n\n});\n"}}